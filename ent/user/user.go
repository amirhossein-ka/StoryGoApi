// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgePosted holds the string denoting the posted edge name in mutations.
	EdgePosted = "posted"
	// EdgeFollowedBy holds the string denoting the followedby edge name in mutations.
	EdgeFollowedBy = "followedBy"
	// Table holds the table name of the user in the database.
	Table = "users"
	// PostedTable is the table that holds the posted relation/edge.
	PostedTable = "stories"
	// PostedInverseTable is the table name for the Story entity.
	// It exists in this package in order to avoid circular dependency with the "story" package.
	PostedInverseTable = "stories"
	// PostedColumn is the table column denoting the posted relation/edge.
	PostedColumn = "user_posted"
	// FollowedByTable is the table that holds the followedBy relation/edge. The primary key declared below.
	FollowedByTable = "guest_user_followed"
	// FollowedByInverseTable is the table name for the GuestUser entity.
	// It exists in this package in order to avoid circular dependency with the "guestuser" package.
	FollowedByInverseTable = "guest_users"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldEmail,
	FieldPassword,
	FieldDeletedAt,
}

var (
	// FollowedByPrimaryKey and FollowedByColumn2 are the table columns denoting the
	// primary key for the followedBy relation (M2M).
	FollowedByPrimaryKey = []string{"guest_user_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByPostedCount orders the results by posted count.
func ByPostedCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPostedStep(), opts...)
	}
}

// ByPosted orders the results by posted terms.
func ByPosted(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPostedStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFollowedByCount orders the results by followedBy count.
func ByFollowedByCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFollowedByStep(), opts...)
	}
}

// ByFollowedBy orders the results by followedBy terms.
func ByFollowedBy(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFollowedByStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPostedStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PostedInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PostedTable, PostedColumn),
	)
}
func newFollowedByStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FollowedByInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, FollowedByTable, FollowedByPrimaryKey...),
	)
}
