// Code generated by ent, DO NOT EDIT.

package ent

import (
	"StoryGoAPI/ent/guestuser"
	"StoryGoAPI/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GuestUserCreate is the builder for creating a GuestUser entity.
type GuestUserCreate struct {
	config
	mutation *GuestUserMutation
	hooks    []Hook
}

// SetToken sets the "token" field.
func (guc *GuestUserCreate) SetToken(s string) *GuestUserCreate {
	guc.mutation.SetToken(s)
	return guc
}

// SetVersionNumber sets the "version_number" field.
func (guc *GuestUserCreate) SetVersionNumber(i int) *GuestUserCreate {
	guc.mutation.SetVersionNumber(i)
	return guc
}

// SetOperationSystem sets the "operation_system" field.
func (guc *GuestUserCreate) SetOperationSystem(s string) *GuestUserCreate {
	guc.mutation.SetOperationSystem(s)
	return guc
}

// SetUserAgent sets the "user_agent" field.
func (guc *GuestUserCreate) SetUserAgent(s string) *GuestUserCreate {
	guc.mutation.SetUserAgent(s)
	return guc
}

// SetDisplayDetails sets the "display_details" field.
func (guc *GuestUserCreate) SetDisplayDetails(s string) *GuestUserCreate {
	guc.mutation.SetDisplayDetails(s)
	return guc
}

// SetCreatedAt sets the "created_at" field.
func (guc *GuestUserCreate) SetCreatedAt(t time.Time) *GuestUserCreate {
	guc.mutation.SetCreatedAt(t)
	return guc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (guc *GuestUserCreate) SetNillableCreatedAt(t *time.Time) *GuestUserCreate {
	if t != nil {
		guc.SetCreatedAt(*t)
	}
	return guc
}

// SetDeletedAt sets the "deleted_at" field.
func (guc *GuestUserCreate) SetDeletedAt(t time.Time) *GuestUserCreate {
	guc.mutation.SetDeletedAt(t)
	return guc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (guc *GuestUserCreate) SetNillableDeletedAt(t *time.Time) *GuestUserCreate {
	if t != nil {
		guc.SetDeletedAt(*t)
	}
	return guc
}

// AddFollowedIDs adds the "followed" edge to the User entity by IDs.
func (guc *GuestUserCreate) AddFollowedIDs(ids ...int) *GuestUserCreate {
	guc.mutation.AddFollowedIDs(ids...)
	return guc
}

// AddFollowed adds the "followed" edges to the User entity.
func (guc *GuestUserCreate) AddFollowed(u ...*User) *GuestUserCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return guc.AddFollowedIDs(ids...)
}

// Mutation returns the GuestUserMutation object of the builder.
func (guc *GuestUserCreate) Mutation() *GuestUserMutation {
	return guc.mutation
}

// Save creates the GuestUser in the database.
func (guc *GuestUserCreate) Save(ctx context.Context) (*GuestUser, error) {
	guc.defaults()
	return withHooks(ctx, guc.sqlSave, guc.mutation, guc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (guc *GuestUserCreate) SaveX(ctx context.Context) *GuestUser {
	v, err := guc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (guc *GuestUserCreate) Exec(ctx context.Context) error {
	_, err := guc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guc *GuestUserCreate) ExecX(ctx context.Context) {
	if err := guc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (guc *GuestUserCreate) defaults() {
	if _, ok := guc.mutation.CreatedAt(); !ok {
		v := guestuser.DefaultCreatedAt
		guc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (guc *GuestUserCreate) check() error {
	if _, ok := guc.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New(`ent: missing required field "GuestUser.token"`)}
	}
	if v, ok := guc.mutation.Token(); ok {
		if err := guestuser.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "GuestUser.token": %w`, err)}
		}
	}
	if _, ok := guc.mutation.VersionNumber(); !ok {
		return &ValidationError{Name: "version_number", err: errors.New(`ent: missing required field "GuestUser.version_number"`)}
	}
	if _, ok := guc.mutation.OperationSystem(); !ok {
		return &ValidationError{Name: "operation_system", err: errors.New(`ent: missing required field "GuestUser.operation_system"`)}
	}
	if _, ok := guc.mutation.UserAgent(); !ok {
		return &ValidationError{Name: "user_agent", err: errors.New(`ent: missing required field "GuestUser.user_agent"`)}
	}
	if _, ok := guc.mutation.DisplayDetails(); !ok {
		return &ValidationError{Name: "display_details", err: errors.New(`ent: missing required field "GuestUser.display_details"`)}
	}
	if _, ok := guc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "GuestUser.created_at"`)}
	}
	return nil
}

func (guc *GuestUserCreate) sqlSave(ctx context.Context) (*GuestUser, error) {
	if err := guc.check(); err != nil {
		return nil, err
	}
	_node, _spec := guc.createSpec()
	if err := sqlgraph.CreateNode(ctx, guc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	guc.mutation.id = &_node.ID
	guc.mutation.done = true
	return _node, nil
}

func (guc *GuestUserCreate) createSpec() (*GuestUser, *sqlgraph.CreateSpec) {
	var (
		_node = &GuestUser{config: guc.config}
		_spec = sqlgraph.NewCreateSpec(guestuser.Table, sqlgraph.NewFieldSpec(guestuser.FieldID, field.TypeInt))
	)
	if value, ok := guc.mutation.Token(); ok {
		_spec.SetField(guestuser.FieldToken, field.TypeString, value)
		_node.Token = value
	}
	if value, ok := guc.mutation.VersionNumber(); ok {
		_spec.SetField(guestuser.FieldVersionNumber, field.TypeInt, value)
		_node.VersionNumber = value
	}
	if value, ok := guc.mutation.OperationSystem(); ok {
		_spec.SetField(guestuser.FieldOperationSystem, field.TypeString, value)
		_node.OperationSystem = value
	}
	if value, ok := guc.mutation.UserAgent(); ok {
		_spec.SetField(guestuser.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = value
	}
	if value, ok := guc.mutation.DisplayDetails(); ok {
		_spec.SetField(guestuser.FieldDisplayDetails, field.TypeString, value)
		_node.DisplayDetails = value
	}
	if value, ok := guc.mutation.CreatedAt(); ok {
		_spec.SetField(guestuser.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := guc.mutation.DeletedAt(); ok {
		_spec.SetField(guestuser.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if nodes := guc.mutation.FollowedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   guestuser.FollowedTable,
			Columns: guestuser.FollowedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GuestUserCreateBulk is the builder for creating many GuestUser entities in bulk.
type GuestUserCreateBulk struct {
	config
	builders []*GuestUserCreate
}

// Save creates the GuestUser entities in the database.
func (gucb *GuestUserCreateBulk) Save(ctx context.Context) ([]*GuestUser, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gucb.builders))
	nodes := make([]*GuestUser, len(gucb.builders))
	mutators := make([]Mutator, len(gucb.builders))
	for i := range gucb.builders {
		func(i int, root context.Context) {
			builder := gucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GuestUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gucb *GuestUserCreateBulk) SaveX(ctx context.Context) []*GuestUser {
	v, err := gucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gucb *GuestUserCreateBulk) Exec(ctx context.Context) error {
	_, err := gucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gucb *GuestUserCreateBulk) ExecX(ctx context.Context) {
	if err := gucb.Exec(ctx); err != nil {
		panic(err)
	}
}
