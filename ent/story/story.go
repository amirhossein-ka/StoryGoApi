// Code generated by ent, DO NOT EDIT.

package story

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the story type in the database.
	Label = "story"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStoryName holds the string denoting the storyname field in the database.
	FieldStoryName = "story_name"
	// FieldBackgroundColor holds the string denoting the backgroundcolor field in the database.
	FieldBackgroundColor = "background_color"
	// FieldBackgroundImage holds the string denoting the backgroundimage field in the database.
	FieldBackgroundImage = "background_image"
	// FieldIsShareable holds the string denoting the isshareable field in the database.
	FieldIsShareable = "is_shareable"
	// FieldAttachedFile holds the string denoting the attachedfile field in the database.
	FieldAttachedFile = "attached_file"
	// FieldExternalWebLink holds the string denoting the externalweblink field in the database.
	FieldExternalWebLink = "external_web_link"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deletedat field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldFromTime holds the string denoting the fromtime field in the database.
	FieldFromTime = "from_time"
	// FieldToTime holds the string denoting the totime field in the database.
	FieldToTime = "to_time"
	// FieldScanCount holds the string denoting the scancount field in the database.
	FieldScanCount = "scan_count"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgePostedby holds the string denoting the postedby edge name in mutations.
	EdgePostedby = "postedby"
	// Table holds the table name of the story in the database.
	Table = "stories"
	// PostedbyTable is the table that holds the postedby relation/edge.
	PostedbyTable = "stories"
	// PostedbyInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	PostedbyInverseTable = "users"
	// PostedbyColumn is the table column denoting the postedby relation/edge.
	PostedbyColumn = "user_posted"
)

// Columns holds all SQL columns for story fields.
var Columns = []string{
	FieldID,
	FieldStoryName,
	FieldBackgroundColor,
	FieldBackgroundImage,
	FieldIsShareable,
	FieldAttachedFile,
	FieldExternalWebLink,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldFromTime,
	FieldToTime,
	FieldScanCount,
	FieldStatus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "stories"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_posted",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// StoryNameValidator is a validator for the "storyName" field. It is called by the builders before save.
	StoryNameValidator func(string) error
	// BackgroundColorValidator is a validator for the "backgroundColor" field. It is called by the builders before save.
	BackgroundColorValidator func(string) error
	// BackgroundImageValidator is a validator for the "backgroundImage" field. It is called by the builders before save.
	BackgroundImageValidator func(string) error
	// DefaultIsShareable holds the default value on creation for the "isShareable" field.
	DefaultIsShareable bool
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultScanCount holds the default value on creation for the "scanCount" field.
	DefaultScanCount uint
)

// Status defines the type for the "status" enum field.
type Status string

// StatusPrivate is the default value of the Status enum.
const DefaultStatus = StatusPrivate

// Status values.
const (
	StatusPrivate Status = "private"
	StatusPublic  Status = "public"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPrivate, StatusPublic:
		return nil
	default:
		return fmt.Errorf("story: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Story queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStoryName orders the results by the storyName field.
func ByStoryName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStoryName, opts...).ToFunc()
}

// ByBackgroundColor orders the results by the backgroundColor field.
func ByBackgroundColor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBackgroundColor, opts...).ToFunc()
}

// ByBackgroundImage orders the results by the backgroundImage field.
func ByBackgroundImage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBackgroundImage, opts...).ToFunc()
}

// ByIsShareable orders the results by the isShareable field.
func ByIsShareable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsShareable, opts...).ToFunc()
}

// ByAttachedFile orders the results by the attachedFile field.
func ByAttachedFile(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAttachedFile, opts...).ToFunc()
}

// ByExternalWebLink orders the results by the externalWebLink field.
func ByExternalWebLink(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExternalWebLink, opts...).ToFunc()
}

// ByCreatedAt orders the results by the createdAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deletedAt field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByFromTime orders the results by the fromTime field.
func ByFromTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFromTime, opts...).ToFunc()
}

// ByToTime orders the results by the toTime field.
func ByToTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToTime, opts...).ToFunc()
}

// ByScanCount orders the results by the scanCount field.
func ByScanCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScanCount, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByPostedbyField orders the results by postedby field.
func ByPostedbyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPostedbyStep(), sql.OrderByField(field, opts...))
	}
}
func newPostedbyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PostedbyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PostedbyTable, PostedbyColumn),
	)
}
