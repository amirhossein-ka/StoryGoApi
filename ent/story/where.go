// Code generated by ent, DO NOT EDIT.

package story

import (
	"StoryGoAPI/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Story {
	return predicate.Story(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Story {
	return predicate.Story(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Story {
	return predicate.Story(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Story {
	return predicate.Story(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Story {
	return predicate.Story(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Story {
	return predicate.Story(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Story {
	return predicate.Story(sql.FieldLTE(FieldID, id))
}

// StoryName applies equality check predicate on the "storyName" field. It's identical to StoryNameEQ.
func StoryName(v string) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldStoryName, v))
}

// BackgroundColor applies equality check predicate on the "backgroundColor" field. It's identical to BackgroundColorEQ.
func BackgroundColor(v string) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldBackgroundColor, v))
}

// BackgroundImage applies equality check predicate on the "backgroundImage" field. It's identical to BackgroundImageEQ.
func BackgroundImage(v string) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldBackgroundImage, v))
}

// IsShareable applies equality check predicate on the "isShareable" field. It's identical to IsShareableEQ.
func IsShareable(v bool) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldIsShareable, v))
}

// AttachedFile applies equality check predicate on the "attachedFile" field. It's identical to AttachedFileEQ.
func AttachedFile(v string) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldAttachedFile, v))
}

// ExternalWebLink applies equality check predicate on the "externalWebLink" field. It's identical to ExternalWebLinkEQ.
func ExternalWebLink(v string) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldExternalWebLink, v))
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deletedAt" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldDeletedAt, v))
}

// FromTime applies equality check predicate on the "fromTime" field. It's identical to FromTimeEQ.
func FromTime(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldFromTime, v))
}

// ToTime applies equality check predicate on the "toTime" field. It's identical to ToTimeEQ.
func ToTime(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldToTime, v))
}

// ScanCount applies equality check predicate on the "scanCount" field. It's identical to ScanCountEQ.
func ScanCount(v uint) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldScanCount, v))
}

// StoryNameEQ applies the EQ predicate on the "storyName" field.
func StoryNameEQ(v string) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldStoryName, v))
}

// StoryNameNEQ applies the NEQ predicate on the "storyName" field.
func StoryNameNEQ(v string) predicate.Story {
	return predicate.Story(sql.FieldNEQ(FieldStoryName, v))
}

// StoryNameIn applies the In predicate on the "storyName" field.
func StoryNameIn(vs ...string) predicate.Story {
	return predicate.Story(sql.FieldIn(FieldStoryName, vs...))
}

// StoryNameNotIn applies the NotIn predicate on the "storyName" field.
func StoryNameNotIn(vs ...string) predicate.Story {
	return predicate.Story(sql.FieldNotIn(FieldStoryName, vs...))
}

// StoryNameGT applies the GT predicate on the "storyName" field.
func StoryNameGT(v string) predicate.Story {
	return predicate.Story(sql.FieldGT(FieldStoryName, v))
}

// StoryNameGTE applies the GTE predicate on the "storyName" field.
func StoryNameGTE(v string) predicate.Story {
	return predicate.Story(sql.FieldGTE(FieldStoryName, v))
}

// StoryNameLT applies the LT predicate on the "storyName" field.
func StoryNameLT(v string) predicate.Story {
	return predicate.Story(sql.FieldLT(FieldStoryName, v))
}

// StoryNameLTE applies the LTE predicate on the "storyName" field.
func StoryNameLTE(v string) predicate.Story {
	return predicate.Story(sql.FieldLTE(FieldStoryName, v))
}

// StoryNameContains applies the Contains predicate on the "storyName" field.
func StoryNameContains(v string) predicate.Story {
	return predicate.Story(sql.FieldContains(FieldStoryName, v))
}

// StoryNameHasPrefix applies the HasPrefix predicate on the "storyName" field.
func StoryNameHasPrefix(v string) predicate.Story {
	return predicate.Story(sql.FieldHasPrefix(FieldStoryName, v))
}

// StoryNameHasSuffix applies the HasSuffix predicate on the "storyName" field.
func StoryNameHasSuffix(v string) predicate.Story {
	return predicate.Story(sql.FieldHasSuffix(FieldStoryName, v))
}

// StoryNameEqualFold applies the EqualFold predicate on the "storyName" field.
func StoryNameEqualFold(v string) predicate.Story {
	return predicate.Story(sql.FieldEqualFold(FieldStoryName, v))
}

// StoryNameContainsFold applies the ContainsFold predicate on the "storyName" field.
func StoryNameContainsFold(v string) predicate.Story {
	return predicate.Story(sql.FieldContainsFold(FieldStoryName, v))
}

// BackgroundColorEQ applies the EQ predicate on the "backgroundColor" field.
func BackgroundColorEQ(v string) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldBackgroundColor, v))
}

// BackgroundColorNEQ applies the NEQ predicate on the "backgroundColor" field.
func BackgroundColorNEQ(v string) predicate.Story {
	return predicate.Story(sql.FieldNEQ(FieldBackgroundColor, v))
}

// BackgroundColorIn applies the In predicate on the "backgroundColor" field.
func BackgroundColorIn(vs ...string) predicate.Story {
	return predicate.Story(sql.FieldIn(FieldBackgroundColor, vs...))
}

// BackgroundColorNotIn applies the NotIn predicate on the "backgroundColor" field.
func BackgroundColorNotIn(vs ...string) predicate.Story {
	return predicate.Story(sql.FieldNotIn(FieldBackgroundColor, vs...))
}

// BackgroundColorGT applies the GT predicate on the "backgroundColor" field.
func BackgroundColorGT(v string) predicate.Story {
	return predicate.Story(sql.FieldGT(FieldBackgroundColor, v))
}

// BackgroundColorGTE applies the GTE predicate on the "backgroundColor" field.
func BackgroundColorGTE(v string) predicate.Story {
	return predicate.Story(sql.FieldGTE(FieldBackgroundColor, v))
}

// BackgroundColorLT applies the LT predicate on the "backgroundColor" field.
func BackgroundColorLT(v string) predicate.Story {
	return predicate.Story(sql.FieldLT(FieldBackgroundColor, v))
}

// BackgroundColorLTE applies the LTE predicate on the "backgroundColor" field.
func BackgroundColorLTE(v string) predicate.Story {
	return predicate.Story(sql.FieldLTE(FieldBackgroundColor, v))
}

// BackgroundColorContains applies the Contains predicate on the "backgroundColor" field.
func BackgroundColorContains(v string) predicate.Story {
	return predicate.Story(sql.FieldContains(FieldBackgroundColor, v))
}

// BackgroundColorHasPrefix applies the HasPrefix predicate on the "backgroundColor" field.
func BackgroundColorHasPrefix(v string) predicate.Story {
	return predicate.Story(sql.FieldHasPrefix(FieldBackgroundColor, v))
}

// BackgroundColorHasSuffix applies the HasSuffix predicate on the "backgroundColor" field.
func BackgroundColorHasSuffix(v string) predicate.Story {
	return predicate.Story(sql.FieldHasSuffix(FieldBackgroundColor, v))
}

// BackgroundColorEqualFold applies the EqualFold predicate on the "backgroundColor" field.
func BackgroundColorEqualFold(v string) predicate.Story {
	return predicate.Story(sql.FieldEqualFold(FieldBackgroundColor, v))
}

// BackgroundColorContainsFold applies the ContainsFold predicate on the "backgroundColor" field.
func BackgroundColorContainsFold(v string) predicate.Story {
	return predicate.Story(sql.FieldContainsFold(FieldBackgroundColor, v))
}

// BackgroundImageEQ applies the EQ predicate on the "backgroundImage" field.
func BackgroundImageEQ(v string) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldBackgroundImage, v))
}

// BackgroundImageNEQ applies the NEQ predicate on the "backgroundImage" field.
func BackgroundImageNEQ(v string) predicate.Story {
	return predicate.Story(sql.FieldNEQ(FieldBackgroundImage, v))
}

// BackgroundImageIn applies the In predicate on the "backgroundImage" field.
func BackgroundImageIn(vs ...string) predicate.Story {
	return predicate.Story(sql.FieldIn(FieldBackgroundImage, vs...))
}

// BackgroundImageNotIn applies the NotIn predicate on the "backgroundImage" field.
func BackgroundImageNotIn(vs ...string) predicate.Story {
	return predicate.Story(sql.FieldNotIn(FieldBackgroundImage, vs...))
}

// BackgroundImageGT applies the GT predicate on the "backgroundImage" field.
func BackgroundImageGT(v string) predicate.Story {
	return predicate.Story(sql.FieldGT(FieldBackgroundImage, v))
}

// BackgroundImageGTE applies the GTE predicate on the "backgroundImage" field.
func BackgroundImageGTE(v string) predicate.Story {
	return predicate.Story(sql.FieldGTE(FieldBackgroundImage, v))
}

// BackgroundImageLT applies the LT predicate on the "backgroundImage" field.
func BackgroundImageLT(v string) predicate.Story {
	return predicate.Story(sql.FieldLT(FieldBackgroundImage, v))
}

// BackgroundImageLTE applies the LTE predicate on the "backgroundImage" field.
func BackgroundImageLTE(v string) predicate.Story {
	return predicate.Story(sql.FieldLTE(FieldBackgroundImage, v))
}

// BackgroundImageContains applies the Contains predicate on the "backgroundImage" field.
func BackgroundImageContains(v string) predicate.Story {
	return predicate.Story(sql.FieldContains(FieldBackgroundImage, v))
}

// BackgroundImageHasPrefix applies the HasPrefix predicate on the "backgroundImage" field.
func BackgroundImageHasPrefix(v string) predicate.Story {
	return predicate.Story(sql.FieldHasPrefix(FieldBackgroundImage, v))
}

// BackgroundImageHasSuffix applies the HasSuffix predicate on the "backgroundImage" field.
func BackgroundImageHasSuffix(v string) predicate.Story {
	return predicate.Story(sql.FieldHasSuffix(FieldBackgroundImage, v))
}

// BackgroundImageEqualFold applies the EqualFold predicate on the "backgroundImage" field.
func BackgroundImageEqualFold(v string) predicate.Story {
	return predicate.Story(sql.FieldEqualFold(FieldBackgroundImage, v))
}

// BackgroundImageContainsFold applies the ContainsFold predicate on the "backgroundImage" field.
func BackgroundImageContainsFold(v string) predicate.Story {
	return predicate.Story(sql.FieldContainsFold(FieldBackgroundImage, v))
}

// IsShareableEQ applies the EQ predicate on the "isShareable" field.
func IsShareableEQ(v bool) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldIsShareable, v))
}

// IsShareableNEQ applies the NEQ predicate on the "isShareable" field.
func IsShareableNEQ(v bool) predicate.Story {
	return predicate.Story(sql.FieldNEQ(FieldIsShareable, v))
}

// AttachedFileEQ applies the EQ predicate on the "attachedFile" field.
func AttachedFileEQ(v string) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldAttachedFile, v))
}

// AttachedFileNEQ applies the NEQ predicate on the "attachedFile" field.
func AttachedFileNEQ(v string) predicate.Story {
	return predicate.Story(sql.FieldNEQ(FieldAttachedFile, v))
}

// AttachedFileIn applies the In predicate on the "attachedFile" field.
func AttachedFileIn(vs ...string) predicate.Story {
	return predicate.Story(sql.FieldIn(FieldAttachedFile, vs...))
}

// AttachedFileNotIn applies the NotIn predicate on the "attachedFile" field.
func AttachedFileNotIn(vs ...string) predicate.Story {
	return predicate.Story(sql.FieldNotIn(FieldAttachedFile, vs...))
}

// AttachedFileGT applies the GT predicate on the "attachedFile" field.
func AttachedFileGT(v string) predicate.Story {
	return predicate.Story(sql.FieldGT(FieldAttachedFile, v))
}

// AttachedFileGTE applies the GTE predicate on the "attachedFile" field.
func AttachedFileGTE(v string) predicate.Story {
	return predicate.Story(sql.FieldGTE(FieldAttachedFile, v))
}

// AttachedFileLT applies the LT predicate on the "attachedFile" field.
func AttachedFileLT(v string) predicate.Story {
	return predicate.Story(sql.FieldLT(FieldAttachedFile, v))
}

// AttachedFileLTE applies the LTE predicate on the "attachedFile" field.
func AttachedFileLTE(v string) predicate.Story {
	return predicate.Story(sql.FieldLTE(FieldAttachedFile, v))
}

// AttachedFileContains applies the Contains predicate on the "attachedFile" field.
func AttachedFileContains(v string) predicate.Story {
	return predicate.Story(sql.FieldContains(FieldAttachedFile, v))
}

// AttachedFileHasPrefix applies the HasPrefix predicate on the "attachedFile" field.
func AttachedFileHasPrefix(v string) predicate.Story {
	return predicate.Story(sql.FieldHasPrefix(FieldAttachedFile, v))
}

// AttachedFileHasSuffix applies the HasSuffix predicate on the "attachedFile" field.
func AttachedFileHasSuffix(v string) predicate.Story {
	return predicate.Story(sql.FieldHasSuffix(FieldAttachedFile, v))
}

// AttachedFileIsNil applies the IsNil predicate on the "attachedFile" field.
func AttachedFileIsNil() predicate.Story {
	return predicate.Story(sql.FieldIsNull(FieldAttachedFile))
}

// AttachedFileNotNil applies the NotNil predicate on the "attachedFile" field.
func AttachedFileNotNil() predicate.Story {
	return predicate.Story(sql.FieldNotNull(FieldAttachedFile))
}

// AttachedFileEqualFold applies the EqualFold predicate on the "attachedFile" field.
func AttachedFileEqualFold(v string) predicate.Story {
	return predicate.Story(sql.FieldEqualFold(FieldAttachedFile, v))
}

// AttachedFileContainsFold applies the ContainsFold predicate on the "attachedFile" field.
func AttachedFileContainsFold(v string) predicate.Story {
	return predicate.Story(sql.FieldContainsFold(FieldAttachedFile, v))
}

// ExternalWebLinkEQ applies the EQ predicate on the "externalWebLink" field.
func ExternalWebLinkEQ(v string) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldExternalWebLink, v))
}

// ExternalWebLinkNEQ applies the NEQ predicate on the "externalWebLink" field.
func ExternalWebLinkNEQ(v string) predicate.Story {
	return predicate.Story(sql.FieldNEQ(FieldExternalWebLink, v))
}

// ExternalWebLinkIn applies the In predicate on the "externalWebLink" field.
func ExternalWebLinkIn(vs ...string) predicate.Story {
	return predicate.Story(sql.FieldIn(FieldExternalWebLink, vs...))
}

// ExternalWebLinkNotIn applies the NotIn predicate on the "externalWebLink" field.
func ExternalWebLinkNotIn(vs ...string) predicate.Story {
	return predicate.Story(sql.FieldNotIn(FieldExternalWebLink, vs...))
}

// ExternalWebLinkGT applies the GT predicate on the "externalWebLink" field.
func ExternalWebLinkGT(v string) predicate.Story {
	return predicate.Story(sql.FieldGT(FieldExternalWebLink, v))
}

// ExternalWebLinkGTE applies the GTE predicate on the "externalWebLink" field.
func ExternalWebLinkGTE(v string) predicate.Story {
	return predicate.Story(sql.FieldGTE(FieldExternalWebLink, v))
}

// ExternalWebLinkLT applies the LT predicate on the "externalWebLink" field.
func ExternalWebLinkLT(v string) predicate.Story {
	return predicate.Story(sql.FieldLT(FieldExternalWebLink, v))
}

// ExternalWebLinkLTE applies the LTE predicate on the "externalWebLink" field.
func ExternalWebLinkLTE(v string) predicate.Story {
	return predicate.Story(sql.FieldLTE(FieldExternalWebLink, v))
}

// ExternalWebLinkContains applies the Contains predicate on the "externalWebLink" field.
func ExternalWebLinkContains(v string) predicate.Story {
	return predicate.Story(sql.FieldContains(FieldExternalWebLink, v))
}

// ExternalWebLinkHasPrefix applies the HasPrefix predicate on the "externalWebLink" field.
func ExternalWebLinkHasPrefix(v string) predicate.Story {
	return predicate.Story(sql.FieldHasPrefix(FieldExternalWebLink, v))
}

// ExternalWebLinkHasSuffix applies the HasSuffix predicate on the "externalWebLink" field.
func ExternalWebLinkHasSuffix(v string) predicate.Story {
	return predicate.Story(sql.FieldHasSuffix(FieldExternalWebLink, v))
}

// ExternalWebLinkIsNil applies the IsNil predicate on the "externalWebLink" field.
func ExternalWebLinkIsNil() predicate.Story {
	return predicate.Story(sql.FieldIsNull(FieldExternalWebLink))
}

// ExternalWebLinkNotNil applies the NotNil predicate on the "externalWebLink" field.
func ExternalWebLinkNotNil() predicate.Story {
	return predicate.Story(sql.FieldNotNull(FieldExternalWebLink))
}

// ExternalWebLinkEqualFold applies the EqualFold predicate on the "externalWebLink" field.
func ExternalWebLinkEqualFold(v string) predicate.Story {
	return predicate.Story(sql.FieldEqualFold(FieldExternalWebLink, v))
}

// ExternalWebLinkContainsFold applies the ContainsFold predicate on the "externalWebLink" field.
func ExternalWebLinkContainsFold(v string) predicate.Story {
	return predicate.Story(sql.FieldContainsFold(FieldExternalWebLink, v))
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.Story {
	return predicate.Story(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Story {
	return predicate.Story(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.Story {
	return predicate.Story(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Story {
	return predicate.Story(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deletedAt" field.
func DeletedAtEQ(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deletedAt" field.
func DeletedAtNEQ(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deletedAt" field.
func DeletedAtIn(vs ...time.Time) predicate.Story {
	return predicate.Story(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deletedAt" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Story {
	return predicate.Story(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deletedAt" field.
func DeletedAtGT(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deletedAt" field.
func DeletedAtGTE(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deletedAt" field.
func DeletedAtLT(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deletedAt" field.
func DeletedAtLTE(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deletedAt" field.
func DeletedAtIsNil() predicate.Story {
	return predicate.Story(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deletedAt" field.
func DeletedAtNotNil() predicate.Story {
	return predicate.Story(sql.FieldNotNull(FieldDeletedAt))
}

// FromTimeEQ applies the EQ predicate on the "fromTime" field.
func FromTimeEQ(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldFromTime, v))
}

// FromTimeNEQ applies the NEQ predicate on the "fromTime" field.
func FromTimeNEQ(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldNEQ(FieldFromTime, v))
}

// FromTimeIn applies the In predicate on the "fromTime" field.
func FromTimeIn(vs ...time.Time) predicate.Story {
	return predicate.Story(sql.FieldIn(FieldFromTime, vs...))
}

// FromTimeNotIn applies the NotIn predicate on the "fromTime" field.
func FromTimeNotIn(vs ...time.Time) predicate.Story {
	return predicate.Story(sql.FieldNotIn(FieldFromTime, vs...))
}

// FromTimeGT applies the GT predicate on the "fromTime" field.
func FromTimeGT(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldGT(FieldFromTime, v))
}

// FromTimeGTE applies the GTE predicate on the "fromTime" field.
func FromTimeGTE(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldGTE(FieldFromTime, v))
}

// FromTimeLT applies the LT predicate on the "fromTime" field.
func FromTimeLT(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldLT(FieldFromTime, v))
}

// FromTimeLTE applies the LTE predicate on the "fromTime" field.
func FromTimeLTE(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldLTE(FieldFromTime, v))
}

// ToTimeEQ applies the EQ predicate on the "toTime" field.
func ToTimeEQ(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldToTime, v))
}

// ToTimeNEQ applies the NEQ predicate on the "toTime" field.
func ToTimeNEQ(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldNEQ(FieldToTime, v))
}

// ToTimeIn applies the In predicate on the "toTime" field.
func ToTimeIn(vs ...time.Time) predicate.Story {
	return predicate.Story(sql.FieldIn(FieldToTime, vs...))
}

// ToTimeNotIn applies the NotIn predicate on the "toTime" field.
func ToTimeNotIn(vs ...time.Time) predicate.Story {
	return predicate.Story(sql.FieldNotIn(FieldToTime, vs...))
}

// ToTimeGT applies the GT predicate on the "toTime" field.
func ToTimeGT(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldGT(FieldToTime, v))
}

// ToTimeGTE applies the GTE predicate on the "toTime" field.
func ToTimeGTE(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldGTE(FieldToTime, v))
}

// ToTimeLT applies the LT predicate on the "toTime" field.
func ToTimeLT(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldLT(FieldToTime, v))
}

// ToTimeLTE applies the LTE predicate on the "toTime" field.
func ToTimeLTE(v time.Time) predicate.Story {
	return predicate.Story(sql.FieldLTE(FieldToTime, v))
}

// ScanCountEQ applies the EQ predicate on the "scanCount" field.
func ScanCountEQ(v uint) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldScanCount, v))
}

// ScanCountNEQ applies the NEQ predicate on the "scanCount" field.
func ScanCountNEQ(v uint) predicate.Story {
	return predicate.Story(sql.FieldNEQ(FieldScanCount, v))
}

// ScanCountIn applies the In predicate on the "scanCount" field.
func ScanCountIn(vs ...uint) predicate.Story {
	return predicate.Story(sql.FieldIn(FieldScanCount, vs...))
}

// ScanCountNotIn applies the NotIn predicate on the "scanCount" field.
func ScanCountNotIn(vs ...uint) predicate.Story {
	return predicate.Story(sql.FieldNotIn(FieldScanCount, vs...))
}

// ScanCountGT applies the GT predicate on the "scanCount" field.
func ScanCountGT(v uint) predicate.Story {
	return predicate.Story(sql.FieldGT(FieldScanCount, v))
}

// ScanCountGTE applies the GTE predicate on the "scanCount" field.
func ScanCountGTE(v uint) predicate.Story {
	return predicate.Story(sql.FieldGTE(FieldScanCount, v))
}

// ScanCountLT applies the LT predicate on the "scanCount" field.
func ScanCountLT(v uint) predicate.Story {
	return predicate.Story(sql.FieldLT(FieldScanCount, v))
}

// ScanCountLTE applies the LTE predicate on the "scanCount" field.
func ScanCountLTE(v uint) predicate.Story {
	return predicate.Story(sql.FieldLTE(FieldScanCount, v))
}

// ScanCountIsNil applies the IsNil predicate on the "scanCount" field.
func ScanCountIsNil() predicate.Story {
	return predicate.Story(sql.FieldIsNull(FieldScanCount))
}

// ScanCountNotNil applies the NotNil predicate on the "scanCount" field.
func ScanCountNotNil() predicate.Story {
	return predicate.Story(sql.FieldNotNull(FieldScanCount))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Story {
	return predicate.Story(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Story {
	return predicate.Story(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Story {
	return predicate.Story(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Story {
	return predicate.Story(sql.FieldNotIn(FieldStatus, vs...))
}

// HasPostedby applies the HasEdge predicate on the "postedby" edge.
func HasPostedby() predicate.Story {
	return predicate.Story(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PostedbyTable, PostedbyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPostedbyWith applies the HasEdge predicate on the "postedby" edge with a given conditions (other predicates).
func HasPostedbyWith(preds ...predicate.User) predicate.Story {
	return predicate.Story(func(s *sql.Selector) {
		step := newPostedbyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Story) predicate.Story {
	return predicate.Story(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Story) predicate.Story {
	return predicate.Story(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Story) predicate.Story {
	return predicate.Story(func(s *sql.Selector) {
		p(s.Not())
	})
}
