// Code generated by ent, DO NOT EDIT.

package ent

import (
	"StoryGoAPI/ent/guestuser"
	"StoryGoAPI/ent/predicate"
	"StoryGoAPI/ent/story"
	"StoryGoAPI/ent/user"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeGuestUser = "GuestUser"
	TypeStory     = "Story"
	TypeUser      = "User"
)

// GuestUserMutation represents an operation that mutates the GuestUser nodes in the graph.
type GuestUserMutation struct {
	config
	op                Op
	typ               string
	id                *int
	token             *string
	version_number    *int
	addversion_number *int
	operation_system  *string
	user_agent        *string
	display_details   *string
	created_at        *time.Time
	deleted_at        *time.Time
	clearedFields     map[string]struct{}
	followed          map[int]struct{}
	removedfollowed   map[int]struct{}
	clearedfollowed   bool
	done              bool
	oldValue          func(context.Context) (*GuestUser, error)
	predicates        []predicate.GuestUser
}

var _ ent.Mutation = (*GuestUserMutation)(nil)

// guestuserOption allows management of the mutation configuration using functional options.
type guestuserOption func(*GuestUserMutation)

// newGuestUserMutation creates new mutation for the GuestUser entity.
func newGuestUserMutation(c config, op Op, opts ...guestuserOption) *GuestUserMutation {
	m := &GuestUserMutation{
		config:        c,
		op:            op,
		typ:           TypeGuestUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGuestUserID sets the ID field of the mutation.
func withGuestUserID(id int) guestuserOption {
	return func(m *GuestUserMutation) {
		var (
			err   error
			once  sync.Once
			value *GuestUser
		)
		m.oldValue = func(ctx context.Context) (*GuestUser, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GuestUser.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGuestUser sets the old GuestUser of the mutation.
func withGuestUser(node *GuestUser) guestuserOption {
	return func(m *GuestUserMutation) {
		m.oldValue = func(context.Context) (*GuestUser, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GuestUserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GuestUserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GuestUserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GuestUserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GuestUser.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetToken sets the "token" field.
func (m *GuestUserMutation) SetToken(s string) {
	m.token = &s
}

// Token returns the value of the "token" field in the mutation.
func (m *GuestUserMutation) Token() (r string, exists bool) {
	v := m.token
	if v == nil {
		return
	}
	return *v, true
}

// OldToken returns the old "token" field's value of the GuestUser entity.
// If the GuestUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuestUserMutation) OldToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToken: %w", err)
	}
	return oldValue.Token, nil
}

// ResetToken resets all changes to the "token" field.
func (m *GuestUserMutation) ResetToken() {
	m.token = nil
}

// SetVersionNumber sets the "version_number" field.
func (m *GuestUserMutation) SetVersionNumber(i int) {
	m.version_number = &i
	m.addversion_number = nil
}

// VersionNumber returns the value of the "version_number" field in the mutation.
func (m *GuestUserMutation) VersionNumber() (r int, exists bool) {
	v := m.version_number
	if v == nil {
		return
	}
	return *v, true
}

// OldVersionNumber returns the old "version_number" field's value of the GuestUser entity.
// If the GuestUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuestUserMutation) OldVersionNumber(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersionNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersionNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersionNumber: %w", err)
	}
	return oldValue.VersionNumber, nil
}

// AddVersionNumber adds i to the "version_number" field.
func (m *GuestUserMutation) AddVersionNumber(i int) {
	if m.addversion_number != nil {
		*m.addversion_number += i
	} else {
		m.addversion_number = &i
	}
}

// AddedVersionNumber returns the value that was added to the "version_number" field in this mutation.
func (m *GuestUserMutation) AddedVersionNumber() (r int, exists bool) {
	v := m.addversion_number
	if v == nil {
		return
	}
	return *v, true
}

// ResetVersionNumber resets all changes to the "version_number" field.
func (m *GuestUserMutation) ResetVersionNumber() {
	m.version_number = nil
	m.addversion_number = nil
}

// SetOperationSystem sets the "operation_system" field.
func (m *GuestUserMutation) SetOperationSystem(s string) {
	m.operation_system = &s
}

// OperationSystem returns the value of the "operation_system" field in the mutation.
func (m *GuestUserMutation) OperationSystem() (r string, exists bool) {
	v := m.operation_system
	if v == nil {
		return
	}
	return *v, true
}

// OldOperationSystem returns the old "operation_system" field's value of the GuestUser entity.
// If the GuestUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuestUserMutation) OldOperationSystem(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOperationSystem is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOperationSystem requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOperationSystem: %w", err)
	}
	return oldValue.OperationSystem, nil
}

// ResetOperationSystem resets all changes to the "operation_system" field.
func (m *GuestUserMutation) ResetOperationSystem() {
	m.operation_system = nil
}

// SetUserAgent sets the "user_agent" field.
func (m *GuestUserMutation) SetUserAgent(s string) {
	m.user_agent = &s
}

// UserAgent returns the value of the "user_agent" field in the mutation.
func (m *GuestUserMutation) UserAgent() (r string, exists bool) {
	v := m.user_agent
	if v == nil {
		return
	}
	return *v, true
}

// OldUserAgent returns the old "user_agent" field's value of the GuestUser entity.
// If the GuestUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuestUserMutation) OldUserAgent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserAgent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserAgent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserAgent: %w", err)
	}
	return oldValue.UserAgent, nil
}

// ResetUserAgent resets all changes to the "user_agent" field.
func (m *GuestUserMutation) ResetUserAgent() {
	m.user_agent = nil
}

// SetDisplayDetails sets the "display_details" field.
func (m *GuestUserMutation) SetDisplayDetails(s string) {
	m.display_details = &s
}

// DisplayDetails returns the value of the "display_details" field in the mutation.
func (m *GuestUserMutation) DisplayDetails() (r string, exists bool) {
	v := m.display_details
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplayDetails returns the old "display_details" field's value of the GuestUser entity.
// If the GuestUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuestUserMutation) OldDisplayDetails(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplayDetails is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplayDetails requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplayDetails: %w", err)
	}
	return oldValue.DisplayDetails, nil
}

// ResetDisplayDetails resets all changes to the "display_details" field.
func (m *GuestUserMutation) ResetDisplayDetails() {
	m.display_details = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *GuestUserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *GuestUserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the GuestUser entity.
// If the GuestUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuestUserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *GuestUserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *GuestUserMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *GuestUserMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the GuestUser entity.
// If the GuestUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuestUserMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *GuestUserMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[guestuser.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *GuestUserMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[guestuser.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *GuestUserMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, guestuser.FieldDeletedAt)
}

// AddFollowedIDs adds the "followed" edge to the User entity by ids.
func (m *GuestUserMutation) AddFollowedIDs(ids ...int) {
	if m.followed == nil {
		m.followed = make(map[int]struct{})
	}
	for i := range ids {
		m.followed[ids[i]] = struct{}{}
	}
}

// ClearFollowed clears the "followed" edge to the User entity.
func (m *GuestUserMutation) ClearFollowed() {
	m.clearedfollowed = true
}

// FollowedCleared reports if the "followed" edge to the User entity was cleared.
func (m *GuestUserMutation) FollowedCleared() bool {
	return m.clearedfollowed
}

// RemoveFollowedIDs removes the "followed" edge to the User entity by IDs.
func (m *GuestUserMutation) RemoveFollowedIDs(ids ...int) {
	if m.removedfollowed == nil {
		m.removedfollowed = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.followed, ids[i])
		m.removedfollowed[ids[i]] = struct{}{}
	}
}

// RemovedFollowed returns the removed IDs of the "followed" edge to the User entity.
func (m *GuestUserMutation) RemovedFollowedIDs() (ids []int) {
	for id := range m.removedfollowed {
		ids = append(ids, id)
	}
	return
}

// FollowedIDs returns the "followed" edge IDs in the mutation.
func (m *GuestUserMutation) FollowedIDs() (ids []int) {
	for id := range m.followed {
		ids = append(ids, id)
	}
	return
}

// ResetFollowed resets all changes to the "followed" edge.
func (m *GuestUserMutation) ResetFollowed() {
	m.followed = nil
	m.clearedfollowed = false
	m.removedfollowed = nil
}

// Where appends a list predicates to the GuestUserMutation builder.
func (m *GuestUserMutation) Where(ps ...predicate.GuestUser) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GuestUserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GuestUserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.GuestUser, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GuestUserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GuestUserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (GuestUser).
func (m *GuestUserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GuestUserMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.token != nil {
		fields = append(fields, guestuser.FieldToken)
	}
	if m.version_number != nil {
		fields = append(fields, guestuser.FieldVersionNumber)
	}
	if m.operation_system != nil {
		fields = append(fields, guestuser.FieldOperationSystem)
	}
	if m.user_agent != nil {
		fields = append(fields, guestuser.FieldUserAgent)
	}
	if m.display_details != nil {
		fields = append(fields, guestuser.FieldDisplayDetails)
	}
	if m.created_at != nil {
		fields = append(fields, guestuser.FieldCreatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, guestuser.FieldDeletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GuestUserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case guestuser.FieldToken:
		return m.Token()
	case guestuser.FieldVersionNumber:
		return m.VersionNumber()
	case guestuser.FieldOperationSystem:
		return m.OperationSystem()
	case guestuser.FieldUserAgent:
		return m.UserAgent()
	case guestuser.FieldDisplayDetails:
		return m.DisplayDetails()
	case guestuser.FieldCreatedAt:
		return m.CreatedAt()
	case guestuser.FieldDeletedAt:
		return m.DeletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GuestUserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case guestuser.FieldToken:
		return m.OldToken(ctx)
	case guestuser.FieldVersionNumber:
		return m.OldVersionNumber(ctx)
	case guestuser.FieldOperationSystem:
		return m.OldOperationSystem(ctx)
	case guestuser.FieldUserAgent:
		return m.OldUserAgent(ctx)
	case guestuser.FieldDisplayDetails:
		return m.OldDisplayDetails(ctx)
	case guestuser.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case guestuser.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown GuestUser field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GuestUserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case guestuser.FieldToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToken(v)
		return nil
	case guestuser.FieldVersionNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersionNumber(v)
		return nil
	case guestuser.FieldOperationSystem:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOperationSystem(v)
		return nil
	case guestuser.FieldUserAgent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserAgent(v)
		return nil
	case guestuser.FieldDisplayDetails:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplayDetails(v)
		return nil
	case guestuser.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case guestuser.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown GuestUser field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GuestUserMutation) AddedFields() []string {
	var fields []string
	if m.addversion_number != nil {
		fields = append(fields, guestuser.FieldVersionNumber)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GuestUserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case guestuser.FieldVersionNumber:
		return m.AddedVersionNumber()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GuestUserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case guestuser.FieldVersionNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVersionNumber(v)
		return nil
	}
	return fmt.Errorf("unknown GuestUser numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GuestUserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(guestuser.FieldDeletedAt) {
		fields = append(fields, guestuser.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GuestUserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GuestUserMutation) ClearField(name string) error {
	switch name {
	case guestuser.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown GuestUser nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GuestUserMutation) ResetField(name string) error {
	switch name {
	case guestuser.FieldToken:
		m.ResetToken()
		return nil
	case guestuser.FieldVersionNumber:
		m.ResetVersionNumber()
		return nil
	case guestuser.FieldOperationSystem:
		m.ResetOperationSystem()
		return nil
	case guestuser.FieldUserAgent:
		m.ResetUserAgent()
		return nil
	case guestuser.FieldDisplayDetails:
		m.ResetDisplayDetails()
		return nil
	case guestuser.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case guestuser.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown GuestUser field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GuestUserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.followed != nil {
		edges = append(edges, guestuser.EdgeFollowed)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GuestUserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case guestuser.EdgeFollowed:
		ids := make([]ent.Value, 0, len(m.followed))
		for id := range m.followed {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GuestUserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedfollowed != nil {
		edges = append(edges, guestuser.EdgeFollowed)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GuestUserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case guestuser.EdgeFollowed:
		ids := make([]ent.Value, 0, len(m.removedfollowed))
		for id := range m.removedfollowed {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GuestUserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedfollowed {
		edges = append(edges, guestuser.EdgeFollowed)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GuestUserMutation) EdgeCleared(name string) bool {
	switch name {
	case guestuser.EdgeFollowed:
		return m.clearedfollowed
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GuestUserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown GuestUser unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GuestUserMutation) ResetEdge(name string) error {
	switch name {
	case guestuser.EdgeFollowed:
		m.ResetFollowed()
		return nil
	}
	return fmt.Errorf("unknown GuestUser edge %s", name)
}

// StoryMutation represents an operation that mutates the Story nodes in the graph.
type StoryMutation struct {
	config
	op              Op
	typ             string
	id              *int
	storyName       *string
	backgroundColor *string
	backgroundImage *string
	isShareable     *bool
	attachedFile    *string
	externalWebLink *string
	createdAt       *time.Time
	updatedAt       *time.Time
	deletedAt       *time.Time
	fromTime        *time.Time
	toTime          *time.Time
	scanCount       *uint
	addscanCount    *int
	status          *story.Status
	clearedFields   map[string]struct{}
	postedby        *int
	clearedpostedby bool
	done            bool
	oldValue        func(context.Context) (*Story, error)
	predicates      []predicate.Story
}

var _ ent.Mutation = (*StoryMutation)(nil)

// storyOption allows management of the mutation configuration using functional options.
type storyOption func(*StoryMutation)

// newStoryMutation creates new mutation for the Story entity.
func newStoryMutation(c config, op Op, opts ...storyOption) *StoryMutation {
	m := &StoryMutation{
		config:        c,
		op:            op,
		typ:           TypeStory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStoryID sets the ID field of the mutation.
func withStoryID(id int) storyOption {
	return func(m *StoryMutation) {
		var (
			err   error
			once  sync.Once
			value *Story
		)
		m.oldValue = func(ctx context.Context) (*Story, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Story.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStory sets the old Story of the mutation.
func withStory(node *Story) storyOption {
	return func(m *StoryMutation) {
		m.oldValue = func(context.Context) (*Story, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StoryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StoryMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Story.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStoryName sets the "storyName" field.
func (m *StoryMutation) SetStoryName(s string) {
	m.storyName = &s
}

// StoryName returns the value of the "storyName" field in the mutation.
func (m *StoryMutation) StoryName() (r string, exists bool) {
	v := m.storyName
	if v == nil {
		return
	}
	return *v, true
}

// OldStoryName returns the old "storyName" field's value of the Story entity.
// If the Story object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoryMutation) OldStoryName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStoryName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStoryName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStoryName: %w", err)
	}
	return oldValue.StoryName, nil
}

// ResetStoryName resets all changes to the "storyName" field.
func (m *StoryMutation) ResetStoryName() {
	m.storyName = nil
}

// SetBackgroundColor sets the "backgroundColor" field.
func (m *StoryMutation) SetBackgroundColor(s string) {
	m.backgroundColor = &s
}

// BackgroundColor returns the value of the "backgroundColor" field in the mutation.
func (m *StoryMutation) BackgroundColor() (r string, exists bool) {
	v := m.backgroundColor
	if v == nil {
		return
	}
	return *v, true
}

// OldBackgroundColor returns the old "backgroundColor" field's value of the Story entity.
// If the Story object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoryMutation) OldBackgroundColor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBackgroundColor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBackgroundColor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBackgroundColor: %w", err)
	}
	return oldValue.BackgroundColor, nil
}

// ResetBackgroundColor resets all changes to the "backgroundColor" field.
func (m *StoryMutation) ResetBackgroundColor() {
	m.backgroundColor = nil
}

// SetBackgroundImage sets the "backgroundImage" field.
func (m *StoryMutation) SetBackgroundImage(s string) {
	m.backgroundImage = &s
}

// BackgroundImage returns the value of the "backgroundImage" field in the mutation.
func (m *StoryMutation) BackgroundImage() (r string, exists bool) {
	v := m.backgroundImage
	if v == nil {
		return
	}
	return *v, true
}

// OldBackgroundImage returns the old "backgroundImage" field's value of the Story entity.
// If the Story object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoryMutation) OldBackgroundImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBackgroundImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBackgroundImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBackgroundImage: %w", err)
	}
	return oldValue.BackgroundImage, nil
}

// ResetBackgroundImage resets all changes to the "backgroundImage" field.
func (m *StoryMutation) ResetBackgroundImage() {
	m.backgroundImage = nil
}

// SetIsShareable sets the "isShareable" field.
func (m *StoryMutation) SetIsShareable(b bool) {
	m.isShareable = &b
}

// IsShareable returns the value of the "isShareable" field in the mutation.
func (m *StoryMutation) IsShareable() (r bool, exists bool) {
	v := m.isShareable
	if v == nil {
		return
	}
	return *v, true
}

// OldIsShareable returns the old "isShareable" field's value of the Story entity.
// If the Story object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoryMutation) OldIsShareable(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsShareable is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsShareable requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsShareable: %w", err)
	}
	return oldValue.IsShareable, nil
}

// ResetIsShareable resets all changes to the "isShareable" field.
func (m *StoryMutation) ResetIsShareable() {
	m.isShareable = nil
}

// SetAttachedFile sets the "attachedFile" field.
func (m *StoryMutation) SetAttachedFile(s string) {
	m.attachedFile = &s
}

// AttachedFile returns the value of the "attachedFile" field in the mutation.
func (m *StoryMutation) AttachedFile() (r string, exists bool) {
	v := m.attachedFile
	if v == nil {
		return
	}
	return *v, true
}

// OldAttachedFile returns the old "attachedFile" field's value of the Story entity.
// If the Story object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoryMutation) OldAttachedFile(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAttachedFile is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAttachedFile requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAttachedFile: %w", err)
	}
	return oldValue.AttachedFile, nil
}

// ClearAttachedFile clears the value of the "attachedFile" field.
func (m *StoryMutation) ClearAttachedFile() {
	m.attachedFile = nil
	m.clearedFields[story.FieldAttachedFile] = struct{}{}
}

// AttachedFileCleared returns if the "attachedFile" field was cleared in this mutation.
func (m *StoryMutation) AttachedFileCleared() bool {
	_, ok := m.clearedFields[story.FieldAttachedFile]
	return ok
}

// ResetAttachedFile resets all changes to the "attachedFile" field.
func (m *StoryMutation) ResetAttachedFile() {
	m.attachedFile = nil
	delete(m.clearedFields, story.FieldAttachedFile)
}

// SetExternalWebLink sets the "externalWebLink" field.
func (m *StoryMutation) SetExternalWebLink(s string) {
	m.externalWebLink = &s
}

// ExternalWebLink returns the value of the "externalWebLink" field in the mutation.
func (m *StoryMutation) ExternalWebLink() (r string, exists bool) {
	v := m.externalWebLink
	if v == nil {
		return
	}
	return *v, true
}

// OldExternalWebLink returns the old "externalWebLink" field's value of the Story entity.
// If the Story object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoryMutation) OldExternalWebLink(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExternalWebLink is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExternalWebLink requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExternalWebLink: %w", err)
	}
	return oldValue.ExternalWebLink, nil
}

// ClearExternalWebLink clears the value of the "externalWebLink" field.
func (m *StoryMutation) ClearExternalWebLink() {
	m.externalWebLink = nil
	m.clearedFields[story.FieldExternalWebLink] = struct{}{}
}

// ExternalWebLinkCleared returns if the "externalWebLink" field was cleared in this mutation.
func (m *StoryMutation) ExternalWebLinkCleared() bool {
	_, ok := m.clearedFields[story.FieldExternalWebLink]
	return ok
}

// ResetExternalWebLink resets all changes to the "externalWebLink" field.
func (m *StoryMutation) ResetExternalWebLink() {
	m.externalWebLink = nil
	delete(m.clearedFields, story.FieldExternalWebLink)
}

// SetCreatedAt sets the "createdAt" field.
func (m *StoryMutation) SetCreatedAt(t time.Time) {
	m.createdAt = &t
}

// CreatedAt returns the value of the "createdAt" field in the mutation.
func (m *StoryMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "createdAt" field's value of the Story entity.
// If the Story object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoryMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "createdAt" field.
func (m *StoryMutation) ResetCreatedAt() {
	m.createdAt = nil
}

// SetUpdatedAt sets the "updatedAt" field.
func (m *StoryMutation) SetUpdatedAt(t time.Time) {
	m.updatedAt = &t
}

// UpdatedAt returns the value of the "updatedAt" field in the mutation.
func (m *StoryMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updatedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updatedAt" field's value of the Story entity.
// If the Story object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoryMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updatedAt" field.
func (m *StoryMutation) ResetUpdatedAt() {
	m.updatedAt = nil
}

// SetDeletedAt sets the "deletedAt" field.
func (m *StoryMutation) SetDeletedAt(t time.Time) {
	m.deletedAt = &t
}

// DeletedAt returns the value of the "deletedAt" field in the mutation.
func (m *StoryMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deletedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deletedAt" field's value of the Story entity.
// If the Story object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoryMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (m *StoryMutation) ClearDeletedAt() {
	m.deletedAt = nil
	m.clearedFields[story.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deletedAt" field was cleared in this mutation.
func (m *StoryMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[story.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deletedAt" field.
func (m *StoryMutation) ResetDeletedAt() {
	m.deletedAt = nil
	delete(m.clearedFields, story.FieldDeletedAt)
}

// SetFromTime sets the "fromTime" field.
func (m *StoryMutation) SetFromTime(t time.Time) {
	m.fromTime = &t
}

// FromTime returns the value of the "fromTime" field in the mutation.
func (m *StoryMutation) FromTime() (r time.Time, exists bool) {
	v := m.fromTime
	if v == nil {
		return
	}
	return *v, true
}

// OldFromTime returns the old "fromTime" field's value of the Story entity.
// If the Story object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoryMutation) OldFromTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFromTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFromTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFromTime: %w", err)
	}
	return oldValue.FromTime, nil
}

// ResetFromTime resets all changes to the "fromTime" field.
func (m *StoryMutation) ResetFromTime() {
	m.fromTime = nil
}

// SetToTime sets the "toTime" field.
func (m *StoryMutation) SetToTime(t time.Time) {
	m.toTime = &t
}

// ToTime returns the value of the "toTime" field in the mutation.
func (m *StoryMutation) ToTime() (r time.Time, exists bool) {
	v := m.toTime
	if v == nil {
		return
	}
	return *v, true
}

// OldToTime returns the old "toTime" field's value of the Story entity.
// If the Story object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoryMutation) OldToTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToTime: %w", err)
	}
	return oldValue.ToTime, nil
}

// ResetToTime resets all changes to the "toTime" field.
func (m *StoryMutation) ResetToTime() {
	m.toTime = nil
}

// SetScanCount sets the "scanCount" field.
func (m *StoryMutation) SetScanCount(u uint) {
	m.scanCount = &u
	m.addscanCount = nil
}

// ScanCount returns the value of the "scanCount" field in the mutation.
func (m *StoryMutation) ScanCount() (r uint, exists bool) {
	v := m.scanCount
	if v == nil {
		return
	}
	return *v, true
}

// OldScanCount returns the old "scanCount" field's value of the Story entity.
// If the Story object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoryMutation) OldScanCount(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScanCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScanCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScanCount: %w", err)
	}
	return oldValue.ScanCount, nil
}

// AddScanCount adds u to the "scanCount" field.
func (m *StoryMutation) AddScanCount(u int) {
	if m.addscanCount != nil {
		*m.addscanCount += u
	} else {
		m.addscanCount = &u
	}
}

// AddedScanCount returns the value that was added to the "scanCount" field in this mutation.
func (m *StoryMutation) AddedScanCount() (r int, exists bool) {
	v := m.addscanCount
	if v == nil {
		return
	}
	return *v, true
}

// ClearScanCount clears the value of the "scanCount" field.
func (m *StoryMutation) ClearScanCount() {
	m.scanCount = nil
	m.addscanCount = nil
	m.clearedFields[story.FieldScanCount] = struct{}{}
}

// ScanCountCleared returns if the "scanCount" field was cleared in this mutation.
func (m *StoryMutation) ScanCountCleared() bool {
	_, ok := m.clearedFields[story.FieldScanCount]
	return ok
}

// ResetScanCount resets all changes to the "scanCount" field.
func (m *StoryMutation) ResetScanCount() {
	m.scanCount = nil
	m.addscanCount = nil
	delete(m.clearedFields, story.FieldScanCount)
}

// SetStatus sets the "status" field.
func (m *StoryMutation) SetStatus(s story.Status) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *StoryMutation) Status() (r story.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Story entity.
// If the Story object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoryMutation) OldStatus(ctx context.Context) (v story.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *StoryMutation) ResetStatus() {
	m.status = nil
}

// SetPostedbyID sets the "postedby" edge to the User entity by id.
func (m *StoryMutation) SetPostedbyID(id int) {
	m.postedby = &id
}

// ClearPostedby clears the "postedby" edge to the User entity.
func (m *StoryMutation) ClearPostedby() {
	m.clearedpostedby = true
}

// PostedbyCleared reports if the "postedby" edge to the User entity was cleared.
func (m *StoryMutation) PostedbyCleared() bool {
	return m.clearedpostedby
}

// PostedbyID returns the "postedby" edge ID in the mutation.
func (m *StoryMutation) PostedbyID() (id int, exists bool) {
	if m.postedby != nil {
		return *m.postedby, true
	}
	return
}

// PostedbyIDs returns the "postedby" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PostedbyID instead. It exists only for internal usage by the builders.
func (m *StoryMutation) PostedbyIDs() (ids []int) {
	if id := m.postedby; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPostedby resets all changes to the "postedby" edge.
func (m *StoryMutation) ResetPostedby() {
	m.postedby = nil
	m.clearedpostedby = false
}

// Where appends a list predicates to the StoryMutation builder.
func (m *StoryMutation) Where(ps ...predicate.Story) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the StoryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *StoryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Story, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *StoryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *StoryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Story).
func (m *StoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StoryMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.storyName != nil {
		fields = append(fields, story.FieldStoryName)
	}
	if m.backgroundColor != nil {
		fields = append(fields, story.FieldBackgroundColor)
	}
	if m.backgroundImage != nil {
		fields = append(fields, story.FieldBackgroundImage)
	}
	if m.isShareable != nil {
		fields = append(fields, story.FieldIsShareable)
	}
	if m.attachedFile != nil {
		fields = append(fields, story.FieldAttachedFile)
	}
	if m.externalWebLink != nil {
		fields = append(fields, story.FieldExternalWebLink)
	}
	if m.createdAt != nil {
		fields = append(fields, story.FieldCreatedAt)
	}
	if m.updatedAt != nil {
		fields = append(fields, story.FieldUpdatedAt)
	}
	if m.deletedAt != nil {
		fields = append(fields, story.FieldDeletedAt)
	}
	if m.fromTime != nil {
		fields = append(fields, story.FieldFromTime)
	}
	if m.toTime != nil {
		fields = append(fields, story.FieldToTime)
	}
	if m.scanCount != nil {
		fields = append(fields, story.FieldScanCount)
	}
	if m.status != nil {
		fields = append(fields, story.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case story.FieldStoryName:
		return m.StoryName()
	case story.FieldBackgroundColor:
		return m.BackgroundColor()
	case story.FieldBackgroundImage:
		return m.BackgroundImage()
	case story.FieldIsShareable:
		return m.IsShareable()
	case story.FieldAttachedFile:
		return m.AttachedFile()
	case story.FieldExternalWebLink:
		return m.ExternalWebLink()
	case story.FieldCreatedAt:
		return m.CreatedAt()
	case story.FieldUpdatedAt:
		return m.UpdatedAt()
	case story.FieldDeletedAt:
		return m.DeletedAt()
	case story.FieldFromTime:
		return m.FromTime()
	case story.FieldToTime:
		return m.ToTime()
	case story.FieldScanCount:
		return m.ScanCount()
	case story.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case story.FieldStoryName:
		return m.OldStoryName(ctx)
	case story.FieldBackgroundColor:
		return m.OldBackgroundColor(ctx)
	case story.FieldBackgroundImage:
		return m.OldBackgroundImage(ctx)
	case story.FieldIsShareable:
		return m.OldIsShareable(ctx)
	case story.FieldAttachedFile:
		return m.OldAttachedFile(ctx)
	case story.FieldExternalWebLink:
		return m.OldExternalWebLink(ctx)
	case story.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case story.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case story.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case story.FieldFromTime:
		return m.OldFromTime(ctx)
	case story.FieldToTime:
		return m.OldToTime(ctx)
	case story.FieldScanCount:
		return m.OldScanCount(ctx)
	case story.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown Story field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case story.FieldStoryName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStoryName(v)
		return nil
	case story.FieldBackgroundColor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBackgroundColor(v)
		return nil
	case story.FieldBackgroundImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBackgroundImage(v)
		return nil
	case story.FieldIsShareable:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsShareable(v)
		return nil
	case story.FieldAttachedFile:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAttachedFile(v)
		return nil
	case story.FieldExternalWebLink:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExternalWebLink(v)
		return nil
	case story.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case story.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case story.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case story.FieldFromTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFromTime(v)
		return nil
	case story.FieldToTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToTime(v)
		return nil
	case story.FieldScanCount:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScanCount(v)
		return nil
	case story.FieldStatus:
		v, ok := value.(story.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Story field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StoryMutation) AddedFields() []string {
	var fields []string
	if m.addscanCount != nil {
		fields = append(fields, story.FieldScanCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StoryMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case story.FieldScanCount:
		return m.AddedScanCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	case story.FieldScanCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddScanCount(v)
		return nil
	}
	return fmt.Errorf("unknown Story numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StoryMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(story.FieldAttachedFile) {
		fields = append(fields, story.FieldAttachedFile)
	}
	if m.FieldCleared(story.FieldExternalWebLink) {
		fields = append(fields, story.FieldExternalWebLink)
	}
	if m.FieldCleared(story.FieldDeletedAt) {
		fields = append(fields, story.FieldDeletedAt)
	}
	if m.FieldCleared(story.FieldScanCount) {
		fields = append(fields, story.FieldScanCount)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StoryMutation) ClearField(name string) error {
	switch name {
	case story.FieldAttachedFile:
		m.ClearAttachedFile()
		return nil
	case story.FieldExternalWebLink:
		m.ClearExternalWebLink()
		return nil
	case story.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case story.FieldScanCount:
		m.ClearScanCount()
		return nil
	}
	return fmt.Errorf("unknown Story nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StoryMutation) ResetField(name string) error {
	switch name {
	case story.FieldStoryName:
		m.ResetStoryName()
		return nil
	case story.FieldBackgroundColor:
		m.ResetBackgroundColor()
		return nil
	case story.FieldBackgroundImage:
		m.ResetBackgroundImage()
		return nil
	case story.FieldIsShareable:
		m.ResetIsShareable()
		return nil
	case story.FieldAttachedFile:
		m.ResetAttachedFile()
		return nil
	case story.FieldExternalWebLink:
		m.ResetExternalWebLink()
		return nil
	case story.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case story.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case story.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case story.FieldFromTime:
		m.ResetFromTime()
		return nil
	case story.FieldToTime:
		m.ResetToTime()
		return nil
	case story.FieldScanCount:
		m.ResetScanCount()
		return nil
	case story.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown Story field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.postedby != nil {
		edges = append(edges, story.EdgePostedby)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StoryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case story.EdgePostedby:
		if id := m.postedby; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StoryMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedpostedby {
		edges = append(edges, story.EdgePostedby)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StoryMutation) EdgeCleared(name string) bool {
	switch name {
	case story.EdgePostedby:
		return m.clearedpostedby
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StoryMutation) ClearEdge(name string) error {
	switch name {
	case story.EdgePostedby:
		m.ClearPostedby()
		return nil
	}
	return fmt.Errorf("unknown Story unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StoryMutation) ResetEdge(name string) error {
	switch name {
	case story.EdgePostedby:
		m.ResetPostedby()
		return nil
	}
	return fmt.Errorf("unknown Story edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                Op
	typ               string
	id                *int
	name              *string
	email             *string
	password          *string
	deleted_at        *time.Time
	clearedFields     map[string]struct{}
	posted            map[int]struct{}
	removedposted     map[int]struct{}
	clearedposted     bool
	followedBy        map[int]struct{}
	removedfollowedBy map[int]struct{}
	clearedfollowedBy bool
	done              bool
	oldValue          func(context.Context) (*User, error)
	predicates        []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *UserMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *UserMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *UserMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[user.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *UserMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[user.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *UserMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, user.FieldDeletedAt)
}

// AddPostedIDs adds the "posted" edge to the Story entity by ids.
func (m *UserMutation) AddPostedIDs(ids ...int) {
	if m.posted == nil {
		m.posted = make(map[int]struct{})
	}
	for i := range ids {
		m.posted[ids[i]] = struct{}{}
	}
}

// ClearPosted clears the "posted" edge to the Story entity.
func (m *UserMutation) ClearPosted() {
	m.clearedposted = true
}

// PostedCleared reports if the "posted" edge to the Story entity was cleared.
func (m *UserMutation) PostedCleared() bool {
	return m.clearedposted
}

// RemovePostedIDs removes the "posted" edge to the Story entity by IDs.
func (m *UserMutation) RemovePostedIDs(ids ...int) {
	if m.removedposted == nil {
		m.removedposted = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.posted, ids[i])
		m.removedposted[ids[i]] = struct{}{}
	}
}

// RemovedPosted returns the removed IDs of the "posted" edge to the Story entity.
func (m *UserMutation) RemovedPostedIDs() (ids []int) {
	for id := range m.removedposted {
		ids = append(ids, id)
	}
	return
}

// PostedIDs returns the "posted" edge IDs in the mutation.
func (m *UserMutation) PostedIDs() (ids []int) {
	for id := range m.posted {
		ids = append(ids, id)
	}
	return
}

// ResetPosted resets all changes to the "posted" edge.
func (m *UserMutation) ResetPosted() {
	m.posted = nil
	m.clearedposted = false
	m.removedposted = nil
}

// AddFollowedByIDs adds the "followedBy" edge to the GuestUser entity by ids.
func (m *UserMutation) AddFollowedByIDs(ids ...int) {
	if m.followedBy == nil {
		m.followedBy = make(map[int]struct{})
	}
	for i := range ids {
		m.followedBy[ids[i]] = struct{}{}
	}
}

// ClearFollowedBy clears the "followedBy" edge to the GuestUser entity.
func (m *UserMutation) ClearFollowedBy() {
	m.clearedfollowedBy = true
}

// FollowedByCleared reports if the "followedBy" edge to the GuestUser entity was cleared.
func (m *UserMutation) FollowedByCleared() bool {
	return m.clearedfollowedBy
}

// RemoveFollowedByIDs removes the "followedBy" edge to the GuestUser entity by IDs.
func (m *UserMutation) RemoveFollowedByIDs(ids ...int) {
	if m.removedfollowedBy == nil {
		m.removedfollowedBy = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.followedBy, ids[i])
		m.removedfollowedBy[ids[i]] = struct{}{}
	}
}

// RemovedFollowedBy returns the removed IDs of the "followedBy" edge to the GuestUser entity.
func (m *UserMutation) RemovedFollowedByIDs() (ids []int) {
	for id := range m.removedfollowedBy {
		ids = append(ids, id)
	}
	return
}

// FollowedByIDs returns the "followedBy" edge IDs in the mutation.
func (m *UserMutation) FollowedByIDs() (ids []int) {
	for id := range m.followedBy {
		ids = append(ids, id)
	}
	return
}

// ResetFollowedBy resets all changes to the "followedBy" edge.
func (m *UserMutation) ResetFollowedBy() {
	m.followedBy = nil
	m.clearedfollowedBy = false
	m.removedfollowedBy = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.deleted_at != nil {
		fields = append(fields, user.FieldDeletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPassword:
		return m.Password()
	case user.FieldDeletedAt:
		return m.DeletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldDeletedAt) {
		fields = append(fields, user.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.posted != nil {
		edges = append(edges, user.EdgePosted)
	}
	if m.followedBy != nil {
		edges = append(edges, user.EdgeFollowedBy)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgePosted:
		ids := make([]ent.Value, 0, len(m.posted))
		for id := range m.posted {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeFollowedBy:
		ids := make([]ent.Value, 0, len(m.followedBy))
		for id := range m.followedBy {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedposted != nil {
		edges = append(edges, user.EdgePosted)
	}
	if m.removedfollowedBy != nil {
		edges = append(edges, user.EdgeFollowedBy)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgePosted:
		ids := make([]ent.Value, 0, len(m.removedposted))
		for id := range m.removedposted {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeFollowedBy:
		ids := make([]ent.Value, 0, len(m.removedfollowedBy))
		for id := range m.removedfollowedBy {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedposted {
		edges = append(edges, user.EdgePosted)
	}
	if m.clearedfollowedBy {
		edges = append(edges, user.EdgeFollowedBy)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgePosted:
		return m.clearedposted
	case user.EdgeFollowedBy:
		return m.clearedfollowedBy
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgePosted:
		m.ResetPosted()
		return nil
	case user.EdgeFollowedBy:
		m.ResetFollowedBy()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
