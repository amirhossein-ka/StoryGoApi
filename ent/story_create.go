// Code generated by ent, DO NOT EDIT.

package ent

import (
	"StoryGoAPI/ent/story"
	"StoryGoAPI/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StoryCreate is the builder for creating a Story entity.
type StoryCreate struct {
	config
	mutation *StoryMutation
	hooks    []Hook
}

// SetStoryName sets the "storyName" field.
func (sc *StoryCreate) SetStoryName(s string) *StoryCreate {
	sc.mutation.SetStoryName(s)
	return sc
}

// SetBackgroundColor sets the "backgroundColor" field.
func (sc *StoryCreate) SetBackgroundColor(s string) *StoryCreate {
	sc.mutation.SetBackgroundColor(s)
	return sc
}

// SetBackgroundImage sets the "backgroundImage" field.
func (sc *StoryCreate) SetBackgroundImage(s string) *StoryCreate {
	sc.mutation.SetBackgroundImage(s)
	return sc
}

// SetIsShareable sets the "isShareable" field.
func (sc *StoryCreate) SetIsShareable(b bool) *StoryCreate {
	sc.mutation.SetIsShareable(b)
	return sc
}

// SetNillableIsShareable sets the "isShareable" field if the given value is not nil.
func (sc *StoryCreate) SetNillableIsShareable(b *bool) *StoryCreate {
	if b != nil {
		sc.SetIsShareable(*b)
	}
	return sc
}

// SetAttachedFile sets the "attachedFile" field.
func (sc *StoryCreate) SetAttachedFile(s string) *StoryCreate {
	sc.mutation.SetAttachedFile(s)
	return sc
}

// SetNillableAttachedFile sets the "attachedFile" field if the given value is not nil.
func (sc *StoryCreate) SetNillableAttachedFile(s *string) *StoryCreate {
	if s != nil {
		sc.SetAttachedFile(*s)
	}
	return sc
}

// SetExternalWebLink sets the "externalWebLink" field.
func (sc *StoryCreate) SetExternalWebLink(s string) *StoryCreate {
	sc.mutation.SetExternalWebLink(s)
	return sc
}

// SetNillableExternalWebLink sets the "externalWebLink" field if the given value is not nil.
func (sc *StoryCreate) SetNillableExternalWebLink(s *string) *StoryCreate {
	if s != nil {
		sc.SetExternalWebLink(*s)
	}
	return sc
}

// SetCreatedAt sets the "createdAt" field.
func (sc *StoryCreate) SetCreatedAt(t time.Time) *StoryCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (sc *StoryCreate) SetNillableCreatedAt(t *time.Time) *StoryCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updatedAt" field.
func (sc *StoryCreate) SetUpdatedAt(t time.Time) *StoryCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (sc *StoryCreate) SetNillableUpdatedAt(t *time.Time) *StoryCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetDeletedAt sets the "deletedAt" field.
func (sc *StoryCreate) SetDeletedAt(t time.Time) *StoryCreate {
	sc.mutation.SetDeletedAt(t)
	return sc
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (sc *StoryCreate) SetNillableDeletedAt(t *time.Time) *StoryCreate {
	if t != nil {
		sc.SetDeletedAt(*t)
	}
	return sc
}

// SetFromTime sets the "fromTime" field.
func (sc *StoryCreate) SetFromTime(t time.Time) *StoryCreate {
	sc.mutation.SetFromTime(t)
	return sc
}

// SetToTime sets the "toTime" field.
func (sc *StoryCreate) SetToTime(t time.Time) *StoryCreate {
	sc.mutation.SetToTime(t)
	return sc
}

// SetScanCount sets the "scanCount" field.
func (sc *StoryCreate) SetScanCount(u uint) *StoryCreate {
	sc.mutation.SetScanCount(u)
	return sc
}

// SetNillableScanCount sets the "scanCount" field if the given value is not nil.
func (sc *StoryCreate) SetNillableScanCount(u *uint) *StoryCreate {
	if u != nil {
		sc.SetScanCount(*u)
	}
	return sc
}

// SetStatus sets the "status" field.
func (sc *StoryCreate) SetStatus(s story.Status) *StoryCreate {
	sc.mutation.SetStatus(s)
	return sc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sc *StoryCreate) SetNillableStatus(s *story.Status) *StoryCreate {
	if s != nil {
		sc.SetStatus(*s)
	}
	return sc
}

// SetPostedbyID sets the "postedby" edge to the User entity by ID.
func (sc *StoryCreate) SetPostedbyID(id int) *StoryCreate {
	sc.mutation.SetPostedbyID(id)
	return sc
}

// SetNillablePostedbyID sets the "postedby" edge to the User entity by ID if the given value is not nil.
func (sc *StoryCreate) SetNillablePostedbyID(id *int) *StoryCreate {
	if id != nil {
		sc = sc.SetPostedbyID(*id)
	}
	return sc
}

// SetPostedby sets the "postedby" edge to the User entity.
func (sc *StoryCreate) SetPostedby(u *User) *StoryCreate {
	return sc.SetPostedbyID(u.ID)
}

// Mutation returns the StoryMutation object of the builder.
func (sc *StoryCreate) Mutation() *StoryMutation {
	return sc.mutation
}

// Save creates the Story in the database.
func (sc *StoryCreate) Save(ctx context.Context) (*Story, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *StoryCreate) SaveX(ctx context.Context) *Story {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *StoryCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *StoryCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *StoryCreate) defaults() {
	if _, ok := sc.mutation.IsShareable(); !ok {
		v := story.DefaultIsShareable
		sc.mutation.SetIsShareable(v)
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := story.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := story.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.ScanCount(); !ok {
		v := story.DefaultScanCount
		sc.mutation.SetScanCount(v)
	}
	if _, ok := sc.mutation.Status(); !ok {
		v := story.DefaultStatus
		sc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *StoryCreate) check() error {
	if _, ok := sc.mutation.StoryName(); !ok {
		return &ValidationError{Name: "storyName", err: errors.New(`ent: missing required field "Story.storyName"`)}
	}
	if v, ok := sc.mutation.StoryName(); ok {
		if err := story.StoryNameValidator(v); err != nil {
			return &ValidationError{Name: "storyName", err: fmt.Errorf(`ent: validator failed for field "Story.storyName": %w`, err)}
		}
	}
	if _, ok := sc.mutation.BackgroundColor(); !ok {
		return &ValidationError{Name: "backgroundColor", err: errors.New(`ent: missing required field "Story.backgroundColor"`)}
	}
	if v, ok := sc.mutation.BackgroundColor(); ok {
		if err := story.BackgroundColorValidator(v); err != nil {
			return &ValidationError{Name: "backgroundColor", err: fmt.Errorf(`ent: validator failed for field "Story.backgroundColor": %w`, err)}
		}
	}
	if _, ok := sc.mutation.BackgroundImage(); !ok {
		return &ValidationError{Name: "backgroundImage", err: errors.New(`ent: missing required field "Story.backgroundImage"`)}
	}
	if v, ok := sc.mutation.BackgroundImage(); ok {
		if err := story.BackgroundImageValidator(v); err != nil {
			return &ValidationError{Name: "backgroundImage", err: fmt.Errorf(`ent: validator failed for field "Story.backgroundImage": %w`, err)}
		}
	}
	if _, ok := sc.mutation.IsShareable(); !ok {
		return &ValidationError{Name: "isShareable", err: errors.New(`ent: missing required field "Story.isShareable"`)}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "Story.createdAt"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "Story.updatedAt"`)}
	}
	if _, ok := sc.mutation.FromTime(); !ok {
		return &ValidationError{Name: "fromTime", err: errors.New(`ent: missing required field "Story.fromTime"`)}
	}
	if _, ok := sc.mutation.ToTime(); !ok {
		return &ValidationError{Name: "toTime", err: errors.New(`ent: missing required field "Story.toTime"`)}
	}
	if _, ok := sc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Story.status"`)}
	}
	if v, ok := sc.mutation.Status(); ok {
		if err := story.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Story.status": %w`, err)}
		}
	}
	return nil
}

func (sc *StoryCreate) sqlSave(ctx context.Context) (*Story, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *StoryCreate) createSpec() (*Story, *sqlgraph.CreateSpec) {
	var (
		_node = &Story{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(story.Table, sqlgraph.NewFieldSpec(story.FieldID, field.TypeInt))
	)
	if value, ok := sc.mutation.StoryName(); ok {
		_spec.SetField(story.FieldStoryName, field.TypeString, value)
		_node.StoryName = value
	}
	if value, ok := sc.mutation.BackgroundColor(); ok {
		_spec.SetField(story.FieldBackgroundColor, field.TypeString, value)
		_node.BackgroundColor = value
	}
	if value, ok := sc.mutation.BackgroundImage(); ok {
		_spec.SetField(story.FieldBackgroundImage, field.TypeString, value)
		_node.BackgroundImage = value
	}
	if value, ok := sc.mutation.IsShareable(); ok {
		_spec.SetField(story.FieldIsShareable, field.TypeBool, value)
		_node.IsShareable = value
	}
	if value, ok := sc.mutation.AttachedFile(); ok {
		_spec.SetField(story.FieldAttachedFile, field.TypeString, value)
		_node.AttachedFile = value
	}
	if value, ok := sc.mutation.ExternalWebLink(); ok {
		_spec.SetField(story.FieldExternalWebLink, field.TypeString, value)
		_node.ExternalWebLink = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(story.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(story.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.DeletedAt(); ok {
		_spec.SetField(story.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := sc.mutation.FromTime(); ok {
		_spec.SetField(story.FieldFromTime, field.TypeTime, value)
		_node.FromTime = value
	}
	if value, ok := sc.mutation.ToTime(); ok {
		_spec.SetField(story.FieldToTime, field.TypeTime, value)
		_node.ToTime = value
	}
	if value, ok := sc.mutation.ScanCount(); ok {
		_spec.SetField(story.FieldScanCount, field.TypeUint, value)
		_node.ScanCount = value
	}
	if value, ok := sc.mutation.Status(); ok {
		_spec.SetField(story.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := sc.mutation.PostedbyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   story.PostedbyTable,
			Columns: []string{story.PostedbyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_posted = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StoryCreateBulk is the builder for creating many Story entities in bulk.
type StoryCreateBulk struct {
	config
	builders []*StoryCreate
}

// Save creates the Story entities in the database.
func (scb *StoryCreateBulk) Save(ctx context.Context) ([]*Story, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Story, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *StoryCreateBulk) SaveX(ctx context.Context) []*Story {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *StoryCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *StoryCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
