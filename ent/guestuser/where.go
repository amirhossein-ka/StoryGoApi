// Code generated by ent, DO NOT EDIT.

package guestuser

import (
	"StoryGoAPI/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldLTE(FieldID, id))
}

// Token applies equality check predicate on the "token" field. It's identical to TokenEQ.
func Token(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldEQ(FieldToken, v))
}

// VersionNumber applies equality check predicate on the "version_number" field. It's identical to VersionNumberEQ.
func VersionNumber(v int) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldEQ(FieldVersionNumber, v))
}

// OperationSystem applies equality check predicate on the "operation_system" field. It's identical to OperationSystemEQ.
func OperationSystem(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldEQ(FieldOperationSystem, v))
}

// UserAgent applies equality check predicate on the "user_agent" field. It's identical to UserAgentEQ.
func UserAgent(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldEQ(FieldUserAgent, v))
}

// DisplayDetails applies equality check predicate on the "display_details" field. It's identical to DisplayDetailsEQ.
func DisplayDetails(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldEQ(FieldDisplayDetails, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldEQ(FieldCreatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldEQ(FieldDeletedAt, v))
}

// TokenEQ applies the EQ predicate on the "token" field.
func TokenEQ(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldEQ(FieldToken, v))
}

// TokenNEQ applies the NEQ predicate on the "token" field.
func TokenNEQ(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldNEQ(FieldToken, v))
}

// TokenIn applies the In predicate on the "token" field.
func TokenIn(vs ...string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldIn(FieldToken, vs...))
}

// TokenNotIn applies the NotIn predicate on the "token" field.
func TokenNotIn(vs ...string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldNotIn(FieldToken, vs...))
}

// TokenGT applies the GT predicate on the "token" field.
func TokenGT(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldGT(FieldToken, v))
}

// TokenGTE applies the GTE predicate on the "token" field.
func TokenGTE(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldGTE(FieldToken, v))
}

// TokenLT applies the LT predicate on the "token" field.
func TokenLT(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldLT(FieldToken, v))
}

// TokenLTE applies the LTE predicate on the "token" field.
func TokenLTE(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldLTE(FieldToken, v))
}

// TokenContains applies the Contains predicate on the "token" field.
func TokenContains(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldContains(FieldToken, v))
}

// TokenHasPrefix applies the HasPrefix predicate on the "token" field.
func TokenHasPrefix(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldHasPrefix(FieldToken, v))
}

// TokenHasSuffix applies the HasSuffix predicate on the "token" field.
func TokenHasSuffix(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldHasSuffix(FieldToken, v))
}

// TokenEqualFold applies the EqualFold predicate on the "token" field.
func TokenEqualFold(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldEqualFold(FieldToken, v))
}

// TokenContainsFold applies the ContainsFold predicate on the "token" field.
func TokenContainsFold(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldContainsFold(FieldToken, v))
}

// VersionNumberEQ applies the EQ predicate on the "version_number" field.
func VersionNumberEQ(v int) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldEQ(FieldVersionNumber, v))
}

// VersionNumberNEQ applies the NEQ predicate on the "version_number" field.
func VersionNumberNEQ(v int) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldNEQ(FieldVersionNumber, v))
}

// VersionNumberIn applies the In predicate on the "version_number" field.
func VersionNumberIn(vs ...int) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldIn(FieldVersionNumber, vs...))
}

// VersionNumberNotIn applies the NotIn predicate on the "version_number" field.
func VersionNumberNotIn(vs ...int) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldNotIn(FieldVersionNumber, vs...))
}

// VersionNumberGT applies the GT predicate on the "version_number" field.
func VersionNumberGT(v int) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldGT(FieldVersionNumber, v))
}

// VersionNumberGTE applies the GTE predicate on the "version_number" field.
func VersionNumberGTE(v int) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldGTE(FieldVersionNumber, v))
}

// VersionNumberLT applies the LT predicate on the "version_number" field.
func VersionNumberLT(v int) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldLT(FieldVersionNumber, v))
}

// VersionNumberLTE applies the LTE predicate on the "version_number" field.
func VersionNumberLTE(v int) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldLTE(FieldVersionNumber, v))
}

// OperationSystemEQ applies the EQ predicate on the "operation_system" field.
func OperationSystemEQ(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldEQ(FieldOperationSystem, v))
}

// OperationSystemNEQ applies the NEQ predicate on the "operation_system" field.
func OperationSystemNEQ(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldNEQ(FieldOperationSystem, v))
}

// OperationSystemIn applies the In predicate on the "operation_system" field.
func OperationSystemIn(vs ...string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldIn(FieldOperationSystem, vs...))
}

// OperationSystemNotIn applies the NotIn predicate on the "operation_system" field.
func OperationSystemNotIn(vs ...string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldNotIn(FieldOperationSystem, vs...))
}

// OperationSystemGT applies the GT predicate on the "operation_system" field.
func OperationSystemGT(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldGT(FieldOperationSystem, v))
}

// OperationSystemGTE applies the GTE predicate on the "operation_system" field.
func OperationSystemGTE(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldGTE(FieldOperationSystem, v))
}

// OperationSystemLT applies the LT predicate on the "operation_system" field.
func OperationSystemLT(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldLT(FieldOperationSystem, v))
}

// OperationSystemLTE applies the LTE predicate on the "operation_system" field.
func OperationSystemLTE(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldLTE(FieldOperationSystem, v))
}

// OperationSystemContains applies the Contains predicate on the "operation_system" field.
func OperationSystemContains(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldContains(FieldOperationSystem, v))
}

// OperationSystemHasPrefix applies the HasPrefix predicate on the "operation_system" field.
func OperationSystemHasPrefix(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldHasPrefix(FieldOperationSystem, v))
}

// OperationSystemHasSuffix applies the HasSuffix predicate on the "operation_system" field.
func OperationSystemHasSuffix(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldHasSuffix(FieldOperationSystem, v))
}

// OperationSystemEqualFold applies the EqualFold predicate on the "operation_system" field.
func OperationSystemEqualFold(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldEqualFold(FieldOperationSystem, v))
}

// OperationSystemContainsFold applies the ContainsFold predicate on the "operation_system" field.
func OperationSystemContainsFold(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldContainsFold(FieldOperationSystem, v))
}

// UserAgentEQ applies the EQ predicate on the "user_agent" field.
func UserAgentEQ(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldEQ(FieldUserAgent, v))
}

// UserAgentNEQ applies the NEQ predicate on the "user_agent" field.
func UserAgentNEQ(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldNEQ(FieldUserAgent, v))
}

// UserAgentIn applies the In predicate on the "user_agent" field.
func UserAgentIn(vs ...string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldIn(FieldUserAgent, vs...))
}

// UserAgentNotIn applies the NotIn predicate on the "user_agent" field.
func UserAgentNotIn(vs ...string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldNotIn(FieldUserAgent, vs...))
}

// UserAgentGT applies the GT predicate on the "user_agent" field.
func UserAgentGT(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldGT(FieldUserAgent, v))
}

// UserAgentGTE applies the GTE predicate on the "user_agent" field.
func UserAgentGTE(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldGTE(FieldUserAgent, v))
}

// UserAgentLT applies the LT predicate on the "user_agent" field.
func UserAgentLT(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldLT(FieldUserAgent, v))
}

// UserAgentLTE applies the LTE predicate on the "user_agent" field.
func UserAgentLTE(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldLTE(FieldUserAgent, v))
}

// UserAgentContains applies the Contains predicate on the "user_agent" field.
func UserAgentContains(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldContains(FieldUserAgent, v))
}

// UserAgentHasPrefix applies the HasPrefix predicate on the "user_agent" field.
func UserAgentHasPrefix(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldHasPrefix(FieldUserAgent, v))
}

// UserAgentHasSuffix applies the HasSuffix predicate on the "user_agent" field.
func UserAgentHasSuffix(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldHasSuffix(FieldUserAgent, v))
}

// UserAgentEqualFold applies the EqualFold predicate on the "user_agent" field.
func UserAgentEqualFold(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldEqualFold(FieldUserAgent, v))
}

// UserAgentContainsFold applies the ContainsFold predicate on the "user_agent" field.
func UserAgentContainsFold(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldContainsFold(FieldUserAgent, v))
}

// DisplayDetailsEQ applies the EQ predicate on the "display_details" field.
func DisplayDetailsEQ(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldEQ(FieldDisplayDetails, v))
}

// DisplayDetailsNEQ applies the NEQ predicate on the "display_details" field.
func DisplayDetailsNEQ(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldNEQ(FieldDisplayDetails, v))
}

// DisplayDetailsIn applies the In predicate on the "display_details" field.
func DisplayDetailsIn(vs ...string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldIn(FieldDisplayDetails, vs...))
}

// DisplayDetailsNotIn applies the NotIn predicate on the "display_details" field.
func DisplayDetailsNotIn(vs ...string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldNotIn(FieldDisplayDetails, vs...))
}

// DisplayDetailsGT applies the GT predicate on the "display_details" field.
func DisplayDetailsGT(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldGT(FieldDisplayDetails, v))
}

// DisplayDetailsGTE applies the GTE predicate on the "display_details" field.
func DisplayDetailsGTE(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldGTE(FieldDisplayDetails, v))
}

// DisplayDetailsLT applies the LT predicate on the "display_details" field.
func DisplayDetailsLT(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldLT(FieldDisplayDetails, v))
}

// DisplayDetailsLTE applies the LTE predicate on the "display_details" field.
func DisplayDetailsLTE(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldLTE(FieldDisplayDetails, v))
}

// DisplayDetailsContains applies the Contains predicate on the "display_details" field.
func DisplayDetailsContains(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldContains(FieldDisplayDetails, v))
}

// DisplayDetailsHasPrefix applies the HasPrefix predicate on the "display_details" field.
func DisplayDetailsHasPrefix(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldHasPrefix(FieldDisplayDetails, v))
}

// DisplayDetailsHasSuffix applies the HasSuffix predicate on the "display_details" field.
func DisplayDetailsHasSuffix(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldHasSuffix(FieldDisplayDetails, v))
}

// DisplayDetailsEqualFold applies the EqualFold predicate on the "display_details" field.
func DisplayDetailsEqualFold(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldEqualFold(FieldDisplayDetails, v))
}

// DisplayDetailsContainsFold applies the ContainsFold predicate on the "display_details" field.
func DisplayDetailsContainsFold(v string) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldContainsFold(FieldDisplayDetails, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldLTE(FieldCreatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.GuestUser {
	return predicate.GuestUser(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.GuestUser {
	return predicate.GuestUser(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.GuestUser {
	return predicate.GuestUser(sql.FieldNotNull(FieldDeletedAt))
}

// HasFollowed applies the HasEdge predicate on the "followed" edge.
func HasFollowed() predicate.GuestUser {
	return predicate.GuestUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, FollowedTable, FollowedPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFollowedWith applies the HasEdge predicate on the "followed" edge with a given conditions (other predicates).
func HasFollowedWith(preds ...predicate.User) predicate.GuestUser {
	return predicate.GuestUser(func(s *sql.Selector) {
		step := newFollowedStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GuestUser) predicate.GuestUser {
	return predicate.GuestUser(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GuestUser) predicate.GuestUser {
	return predicate.GuestUser(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GuestUser) predicate.GuestUser {
	return predicate.GuestUser(func(s *sql.Selector) {
		p(s.Not())
	})
}
