// Code generated by ent, DO NOT EDIT.

package guestuser

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the guestuser type in the database.
	Label = "guest_user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldToken holds the string denoting the token field in the database.
	FieldToken = "token"
	// FieldVersionNumber holds the string denoting the version_number field in the database.
	FieldVersionNumber = "version_number"
	// FieldOperationSystem holds the string denoting the operation_system field in the database.
	FieldOperationSystem = "operation_system"
	// FieldUserAgent holds the string denoting the user_agent field in the database.
	FieldUserAgent = "user_agent"
	// FieldDisplayDetails holds the string denoting the display_details field in the database.
	FieldDisplayDetails = "display_details"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgeFollowed holds the string denoting the followed edge name in mutations.
	EdgeFollowed = "followed"
	// Table holds the table name of the guestuser in the database.
	Table = "guest_users"
	// FollowedTable is the table that holds the followed relation/edge. The primary key declared below.
	FollowedTable = "guest_user_followed"
	// FollowedInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	FollowedInverseTable = "users"
)

// Columns holds all SQL columns for guestuser fields.
var Columns = []string{
	FieldID,
	FieldToken,
	FieldVersionNumber,
	FieldOperationSystem,
	FieldUserAgent,
	FieldDisplayDetails,
	FieldCreatedAt,
	FieldDeletedAt,
}

var (
	// FollowedPrimaryKey and FollowedColumn2 are the table columns denoting the
	// primary key for the followed relation (M2M).
	FollowedPrimaryKey = []string{"guest_user_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TokenValidator is a validator for the "token" field. It is called by the builders before save.
	TokenValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
)

// OrderOption defines the ordering options for the GuestUser queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByToken orders the results by the token field.
func ByToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToken, opts...).ToFunc()
}

// ByVersionNumber orders the results by the version_number field.
func ByVersionNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersionNumber, opts...).ToFunc()
}

// ByOperationSystem orders the results by the operation_system field.
func ByOperationSystem(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperationSystem, opts...).ToFunc()
}

// ByUserAgent orders the results by the user_agent field.
func ByUserAgent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserAgent, opts...).ToFunc()
}

// ByDisplayDetails orders the results by the display_details field.
func ByDisplayDetails(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayDetails, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByFollowedCount orders the results by followed count.
func ByFollowedCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFollowedStep(), opts...)
	}
}

// ByFollowed orders the results by followed terms.
func ByFollowed(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFollowedStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newFollowedStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FollowedInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, FollowedTable, FollowedPrimaryKey...),
	)
}
