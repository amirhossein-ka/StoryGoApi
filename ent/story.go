// Code generated by ent, DO NOT EDIT.

package ent

import (
	"StoryGoAPI/ent/story"
	"StoryGoAPI/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Story is the model entity for the Story schema.
type Story struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// StoryName holds the value of the "storyName" field.
	StoryName string `json:"storyName,omitempty"`
	// BackgroundColor holds the value of the "backgroundColor" field.
	BackgroundColor string `json:"backgroundColor,omitempty"`
	// BackgroundImage holds the value of the "backgroundImage" field.
	BackgroundImage string `json:"backgroundImage,omitempty"`
	// IsShareable holds the value of the "isShareable" field.
	IsShareable bool `json:"isShareable,omitempty"`
	// AttachedFile holds the value of the "attachedFile" field.
	AttachedFile string `json:"attachedFile,omitempty"`
	// ExternalWebLink holds the value of the "externalWebLink" field.
	ExternalWebLink string `json:"externalWebLink,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// DeletedAt holds the value of the "deletedAt" field.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	// FromTime holds the value of the "fromTime" field.
	FromTime time.Time `json:"fromTime,omitempty"`
	// ToTime holds the value of the "toTime" field.
	ToTime time.Time `json:"toTime,omitempty"`
	// ScanCount holds the value of the "scanCount" field.
	ScanCount uint `json:"scanCount,omitempty"`
	// Status holds the value of the "status" field.
	Status story.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StoryQuery when eager-loading is set.
	Edges        StoryEdges `json:"edges"`
	user_posted  *int
	selectValues sql.SelectValues
}

// StoryEdges holds the relations/edges for other nodes in the graph.
type StoryEdges struct {
	// Postedby holds the value of the postedby edge.
	Postedby *User `json:"postedby,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PostedbyOrErr returns the Postedby value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StoryEdges) PostedbyOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Postedby == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Postedby, nil
	}
	return nil, &NotLoadedError{edge: "postedby"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Story) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case story.FieldIsShareable:
			values[i] = new(sql.NullBool)
		case story.FieldID, story.FieldScanCount:
			values[i] = new(sql.NullInt64)
		case story.FieldStoryName, story.FieldBackgroundColor, story.FieldBackgroundImage, story.FieldAttachedFile, story.FieldExternalWebLink, story.FieldStatus:
			values[i] = new(sql.NullString)
		case story.FieldCreatedAt, story.FieldUpdatedAt, story.FieldDeletedAt, story.FieldFromTime, story.FieldToTime:
			values[i] = new(sql.NullTime)
		case story.ForeignKeys[0]: // user_posted
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Story fields.
func (s *Story) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case story.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case story.FieldStoryName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field storyName", values[i])
			} else if value.Valid {
				s.StoryName = value.String
			}
		case story.FieldBackgroundColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field backgroundColor", values[i])
			} else if value.Valid {
				s.BackgroundColor = value.String
			}
		case story.FieldBackgroundImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field backgroundImage", values[i])
			} else if value.Valid {
				s.BackgroundImage = value.String
			}
		case story.FieldIsShareable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isShareable", values[i])
			} else if value.Valid {
				s.IsShareable = value.Bool
			}
		case story.FieldAttachedFile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field attachedFile", values[i])
			} else if value.Valid {
				s.AttachedFile = value.String
			}
		case story.FieldExternalWebLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field externalWebLink", values[i])
			} else if value.Valid {
				s.ExternalWebLink = value.String
			}
		case story.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case story.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case story.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deletedAt", values[i])
			} else if value.Valid {
				s.DeletedAt = new(time.Time)
				*s.DeletedAt = value.Time
			}
		case story.FieldFromTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field fromTime", values[i])
			} else if value.Valid {
				s.FromTime = value.Time
			}
		case story.FieldToTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field toTime", values[i])
			} else if value.Valid {
				s.ToTime = value.Time
			}
		case story.FieldScanCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field scanCount", values[i])
			} else if value.Valid {
				s.ScanCount = uint(value.Int64)
			}
		case story.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				s.Status = story.Status(value.String)
			}
		case story.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_posted", value)
			} else if value.Valid {
				s.user_posted = new(int)
				*s.user_posted = int(value.Int64)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Story.
// This includes values selected through modifiers, order, etc.
func (s *Story) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryPostedby queries the "postedby" edge of the Story entity.
func (s *Story) QueryPostedby() *UserQuery {
	return NewStoryClient(s.config).QueryPostedby(s)
}

// Update returns a builder for updating this Story.
// Note that you need to call Story.Unwrap() before calling this method if this Story
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Story) Update() *StoryUpdateOne {
	return NewStoryClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Story entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Story) Unwrap() *Story {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Story is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Story) String() string {
	var builder strings.Builder
	builder.WriteString("Story(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("storyName=")
	builder.WriteString(s.StoryName)
	builder.WriteString(", ")
	builder.WriteString("backgroundColor=")
	builder.WriteString(s.BackgroundColor)
	builder.WriteString(", ")
	builder.WriteString("backgroundImage=")
	builder.WriteString(s.BackgroundImage)
	builder.WriteString(", ")
	builder.WriteString("isShareable=")
	builder.WriteString(fmt.Sprintf("%v", s.IsShareable))
	builder.WriteString(", ")
	builder.WriteString("attachedFile=")
	builder.WriteString(s.AttachedFile)
	builder.WriteString(", ")
	builder.WriteString("externalWebLink=")
	builder.WriteString(s.ExternalWebLink)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := s.DeletedAt; v != nil {
		builder.WriteString("deletedAt=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("fromTime=")
	builder.WriteString(s.FromTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("toTime=")
	builder.WriteString(s.ToTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("scanCount=")
	builder.WriteString(fmt.Sprintf("%v", s.ScanCount))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", s.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Stories is a parsable slice of Story.
type Stories []*Story
