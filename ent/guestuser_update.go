// Code generated by ent, DO NOT EDIT.

package ent

import (
	"StoryGoAPI/ent/guestuser"
	"StoryGoAPI/ent/predicate"
	"StoryGoAPI/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GuestUserUpdate is the builder for updating GuestUser entities.
type GuestUserUpdate struct {
	config
	hooks    []Hook
	mutation *GuestUserMutation
}

// Where appends a list predicates to the GuestUserUpdate builder.
func (guu *GuestUserUpdate) Where(ps ...predicate.GuestUser) *GuestUserUpdate {
	guu.mutation.Where(ps...)
	return guu
}

// SetToken sets the "token" field.
func (guu *GuestUserUpdate) SetToken(s string) *GuestUserUpdate {
	guu.mutation.SetToken(s)
	return guu
}

// SetVersionNumber sets the "version_number" field.
func (guu *GuestUserUpdate) SetVersionNumber(i int) *GuestUserUpdate {
	guu.mutation.ResetVersionNumber()
	guu.mutation.SetVersionNumber(i)
	return guu
}

// AddVersionNumber adds i to the "version_number" field.
func (guu *GuestUserUpdate) AddVersionNumber(i int) *GuestUserUpdate {
	guu.mutation.AddVersionNumber(i)
	return guu
}

// SetOperationSystem sets the "operation_system" field.
func (guu *GuestUserUpdate) SetOperationSystem(s string) *GuestUserUpdate {
	guu.mutation.SetOperationSystem(s)
	return guu
}

// SetUserAgent sets the "user_agent" field.
func (guu *GuestUserUpdate) SetUserAgent(s string) *GuestUserUpdate {
	guu.mutation.SetUserAgent(s)
	return guu
}

// SetDisplayDetails sets the "display_details" field.
func (guu *GuestUserUpdate) SetDisplayDetails(s string) *GuestUserUpdate {
	guu.mutation.SetDisplayDetails(s)
	return guu
}

// SetCreatedAt sets the "created_at" field.
func (guu *GuestUserUpdate) SetCreatedAt(t time.Time) *GuestUserUpdate {
	guu.mutation.SetCreatedAt(t)
	return guu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (guu *GuestUserUpdate) SetNillableCreatedAt(t *time.Time) *GuestUserUpdate {
	if t != nil {
		guu.SetCreatedAt(*t)
	}
	return guu
}

// SetDeletedAt sets the "deleted_at" field.
func (guu *GuestUserUpdate) SetDeletedAt(t time.Time) *GuestUserUpdate {
	guu.mutation.SetDeletedAt(t)
	return guu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (guu *GuestUserUpdate) SetNillableDeletedAt(t *time.Time) *GuestUserUpdate {
	if t != nil {
		guu.SetDeletedAt(*t)
	}
	return guu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (guu *GuestUserUpdate) ClearDeletedAt() *GuestUserUpdate {
	guu.mutation.ClearDeletedAt()
	return guu
}

// AddFollowedIDs adds the "followed" edge to the User entity by IDs.
func (guu *GuestUserUpdate) AddFollowedIDs(ids ...int) *GuestUserUpdate {
	guu.mutation.AddFollowedIDs(ids...)
	return guu
}

// AddFollowed adds the "followed" edges to the User entity.
func (guu *GuestUserUpdate) AddFollowed(u ...*User) *GuestUserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return guu.AddFollowedIDs(ids...)
}

// Mutation returns the GuestUserMutation object of the builder.
func (guu *GuestUserUpdate) Mutation() *GuestUserMutation {
	return guu.mutation
}

// ClearFollowed clears all "followed" edges to the User entity.
func (guu *GuestUserUpdate) ClearFollowed() *GuestUserUpdate {
	guu.mutation.ClearFollowed()
	return guu
}

// RemoveFollowedIDs removes the "followed" edge to User entities by IDs.
func (guu *GuestUserUpdate) RemoveFollowedIDs(ids ...int) *GuestUserUpdate {
	guu.mutation.RemoveFollowedIDs(ids...)
	return guu
}

// RemoveFollowed removes "followed" edges to User entities.
func (guu *GuestUserUpdate) RemoveFollowed(u ...*User) *GuestUserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return guu.RemoveFollowedIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (guu *GuestUserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, guu.sqlSave, guu.mutation, guu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (guu *GuestUserUpdate) SaveX(ctx context.Context) int {
	affected, err := guu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (guu *GuestUserUpdate) Exec(ctx context.Context) error {
	_, err := guu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guu *GuestUserUpdate) ExecX(ctx context.Context) {
	if err := guu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (guu *GuestUserUpdate) check() error {
	if v, ok := guu.mutation.Token(); ok {
		if err := guestuser.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "GuestUser.token": %w`, err)}
		}
	}
	return nil
}

func (guu *GuestUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := guu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(guestuser.Table, guestuser.Columns, sqlgraph.NewFieldSpec(guestuser.FieldID, field.TypeInt))
	if ps := guu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guu.mutation.Token(); ok {
		_spec.SetField(guestuser.FieldToken, field.TypeString, value)
	}
	if value, ok := guu.mutation.VersionNumber(); ok {
		_spec.SetField(guestuser.FieldVersionNumber, field.TypeInt, value)
	}
	if value, ok := guu.mutation.AddedVersionNumber(); ok {
		_spec.AddField(guestuser.FieldVersionNumber, field.TypeInt, value)
	}
	if value, ok := guu.mutation.OperationSystem(); ok {
		_spec.SetField(guestuser.FieldOperationSystem, field.TypeString, value)
	}
	if value, ok := guu.mutation.UserAgent(); ok {
		_spec.SetField(guestuser.FieldUserAgent, field.TypeString, value)
	}
	if value, ok := guu.mutation.DisplayDetails(); ok {
		_spec.SetField(guestuser.FieldDisplayDetails, field.TypeString, value)
	}
	if value, ok := guu.mutation.CreatedAt(); ok {
		_spec.SetField(guestuser.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := guu.mutation.DeletedAt(); ok {
		_spec.SetField(guestuser.FieldDeletedAt, field.TypeTime, value)
	}
	if guu.mutation.DeletedAtCleared() {
		_spec.ClearField(guestuser.FieldDeletedAt, field.TypeTime)
	}
	if guu.mutation.FollowedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   guestuser.FollowedTable,
			Columns: guestuser.FollowedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guu.mutation.RemovedFollowedIDs(); len(nodes) > 0 && !guu.mutation.FollowedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   guestuser.FollowedTable,
			Columns: guestuser.FollowedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guu.mutation.FollowedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   guestuser.FollowedTable,
			Columns: guestuser.FollowedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, guu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{guestuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	guu.mutation.done = true
	return n, nil
}

// GuestUserUpdateOne is the builder for updating a single GuestUser entity.
type GuestUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GuestUserMutation
}

// SetToken sets the "token" field.
func (guuo *GuestUserUpdateOne) SetToken(s string) *GuestUserUpdateOne {
	guuo.mutation.SetToken(s)
	return guuo
}

// SetVersionNumber sets the "version_number" field.
func (guuo *GuestUserUpdateOne) SetVersionNumber(i int) *GuestUserUpdateOne {
	guuo.mutation.ResetVersionNumber()
	guuo.mutation.SetVersionNumber(i)
	return guuo
}

// AddVersionNumber adds i to the "version_number" field.
func (guuo *GuestUserUpdateOne) AddVersionNumber(i int) *GuestUserUpdateOne {
	guuo.mutation.AddVersionNumber(i)
	return guuo
}

// SetOperationSystem sets the "operation_system" field.
func (guuo *GuestUserUpdateOne) SetOperationSystem(s string) *GuestUserUpdateOne {
	guuo.mutation.SetOperationSystem(s)
	return guuo
}

// SetUserAgent sets the "user_agent" field.
func (guuo *GuestUserUpdateOne) SetUserAgent(s string) *GuestUserUpdateOne {
	guuo.mutation.SetUserAgent(s)
	return guuo
}

// SetDisplayDetails sets the "display_details" field.
func (guuo *GuestUserUpdateOne) SetDisplayDetails(s string) *GuestUserUpdateOne {
	guuo.mutation.SetDisplayDetails(s)
	return guuo
}

// SetCreatedAt sets the "created_at" field.
func (guuo *GuestUserUpdateOne) SetCreatedAt(t time.Time) *GuestUserUpdateOne {
	guuo.mutation.SetCreatedAt(t)
	return guuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (guuo *GuestUserUpdateOne) SetNillableCreatedAt(t *time.Time) *GuestUserUpdateOne {
	if t != nil {
		guuo.SetCreatedAt(*t)
	}
	return guuo
}

// SetDeletedAt sets the "deleted_at" field.
func (guuo *GuestUserUpdateOne) SetDeletedAt(t time.Time) *GuestUserUpdateOne {
	guuo.mutation.SetDeletedAt(t)
	return guuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (guuo *GuestUserUpdateOne) SetNillableDeletedAt(t *time.Time) *GuestUserUpdateOne {
	if t != nil {
		guuo.SetDeletedAt(*t)
	}
	return guuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (guuo *GuestUserUpdateOne) ClearDeletedAt() *GuestUserUpdateOne {
	guuo.mutation.ClearDeletedAt()
	return guuo
}

// AddFollowedIDs adds the "followed" edge to the User entity by IDs.
func (guuo *GuestUserUpdateOne) AddFollowedIDs(ids ...int) *GuestUserUpdateOne {
	guuo.mutation.AddFollowedIDs(ids...)
	return guuo
}

// AddFollowed adds the "followed" edges to the User entity.
func (guuo *GuestUserUpdateOne) AddFollowed(u ...*User) *GuestUserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return guuo.AddFollowedIDs(ids...)
}

// Mutation returns the GuestUserMutation object of the builder.
func (guuo *GuestUserUpdateOne) Mutation() *GuestUserMutation {
	return guuo.mutation
}

// ClearFollowed clears all "followed" edges to the User entity.
func (guuo *GuestUserUpdateOne) ClearFollowed() *GuestUserUpdateOne {
	guuo.mutation.ClearFollowed()
	return guuo
}

// RemoveFollowedIDs removes the "followed" edge to User entities by IDs.
func (guuo *GuestUserUpdateOne) RemoveFollowedIDs(ids ...int) *GuestUserUpdateOne {
	guuo.mutation.RemoveFollowedIDs(ids...)
	return guuo
}

// RemoveFollowed removes "followed" edges to User entities.
func (guuo *GuestUserUpdateOne) RemoveFollowed(u ...*User) *GuestUserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return guuo.RemoveFollowedIDs(ids...)
}

// Where appends a list predicates to the GuestUserUpdate builder.
func (guuo *GuestUserUpdateOne) Where(ps ...predicate.GuestUser) *GuestUserUpdateOne {
	guuo.mutation.Where(ps...)
	return guuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guuo *GuestUserUpdateOne) Select(field string, fields ...string) *GuestUserUpdateOne {
	guuo.fields = append([]string{field}, fields...)
	return guuo
}

// Save executes the query and returns the updated GuestUser entity.
func (guuo *GuestUserUpdateOne) Save(ctx context.Context) (*GuestUser, error) {
	return withHooks(ctx, guuo.sqlSave, guuo.mutation, guuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (guuo *GuestUserUpdateOne) SaveX(ctx context.Context) *GuestUser {
	node, err := guuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guuo *GuestUserUpdateOne) Exec(ctx context.Context) error {
	_, err := guuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guuo *GuestUserUpdateOne) ExecX(ctx context.Context) {
	if err := guuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (guuo *GuestUserUpdateOne) check() error {
	if v, ok := guuo.mutation.Token(); ok {
		if err := guestuser.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "GuestUser.token": %w`, err)}
		}
	}
	return nil
}

func (guuo *GuestUserUpdateOne) sqlSave(ctx context.Context) (_node *GuestUser, err error) {
	if err := guuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(guestuser.Table, guestuser.Columns, sqlgraph.NewFieldSpec(guestuser.FieldID, field.TypeInt))
	id, ok := guuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GuestUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, guestuser.FieldID)
		for _, f := range fields {
			if !guestuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != guestuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guuo.mutation.Token(); ok {
		_spec.SetField(guestuser.FieldToken, field.TypeString, value)
	}
	if value, ok := guuo.mutation.VersionNumber(); ok {
		_spec.SetField(guestuser.FieldVersionNumber, field.TypeInt, value)
	}
	if value, ok := guuo.mutation.AddedVersionNumber(); ok {
		_spec.AddField(guestuser.FieldVersionNumber, field.TypeInt, value)
	}
	if value, ok := guuo.mutation.OperationSystem(); ok {
		_spec.SetField(guestuser.FieldOperationSystem, field.TypeString, value)
	}
	if value, ok := guuo.mutation.UserAgent(); ok {
		_spec.SetField(guestuser.FieldUserAgent, field.TypeString, value)
	}
	if value, ok := guuo.mutation.DisplayDetails(); ok {
		_spec.SetField(guestuser.FieldDisplayDetails, field.TypeString, value)
	}
	if value, ok := guuo.mutation.CreatedAt(); ok {
		_spec.SetField(guestuser.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := guuo.mutation.DeletedAt(); ok {
		_spec.SetField(guestuser.FieldDeletedAt, field.TypeTime, value)
	}
	if guuo.mutation.DeletedAtCleared() {
		_spec.ClearField(guestuser.FieldDeletedAt, field.TypeTime)
	}
	if guuo.mutation.FollowedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   guestuser.FollowedTable,
			Columns: guestuser.FollowedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guuo.mutation.RemovedFollowedIDs(); len(nodes) > 0 && !guuo.mutation.FollowedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   guestuser.FollowedTable,
			Columns: guestuser.FollowedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guuo.mutation.FollowedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   guestuser.FollowedTable,
			Columns: guestuser.FollowedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GuestUser{config: guuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{guestuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	guuo.mutation.done = true
	return _node, nil
}
