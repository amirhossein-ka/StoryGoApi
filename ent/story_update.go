// Code generated by ent, DO NOT EDIT.

package ent

import (
	"StoryGoAPI/ent/predicate"
	"StoryGoAPI/ent/story"
	"StoryGoAPI/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StoryUpdate is the builder for updating Story entities.
type StoryUpdate struct {
	config
	hooks    []Hook
	mutation *StoryMutation
}

// Where appends a list predicates to the StoryUpdate builder.
func (su *StoryUpdate) Where(ps ...predicate.Story) *StoryUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetStoryName sets the "storyName" field.
func (su *StoryUpdate) SetStoryName(s string) *StoryUpdate {
	su.mutation.SetStoryName(s)
	return su
}

// SetBackgroundColor sets the "backgroundColor" field.
func (su *StoryUpdate) SetBackgroundColor(s string) *StoryUpdate {
	su.mutation.SetBackgroundColor(s)
	return su
}

// SetBackgroundImage sets the "backgroundImage" field.
func (su *StoryUpdate) SetBackgroundImage(s string) *StoryUpdate {
	su.mutation.SetBackgroundImage(s)
	return su
}

// SetIsShareable sets the "isShareable" field.
func (su *StoryUpdate) SetIsShareable(b bool) *StoryUpdate {
	su.mutation.SetIsShareable(b)
	return su
}

// SetNillableIsShareable sets the "isShareable" field if the given value is not nil.
func (su *StoryUpdate) SetNillableIsShareable(b *bool) *StoryUpdate {
	if b != nil {
		su.SetIsShareable(*b)
	}
	return su
}

// SetAttachedFile sets the "attachedFile" field.
func (su *StoryUpdate) SetAttachedFile(s string) *StoryUpdate {
	su.mutation.SetAttachedFile(s)
	return su
}

// SetNillableAttachedFile sets the "attachedFile" field if the given value is not nil.
func (su *StoryUpdate) SetNillableAttachedFile(s *string) *StoryUpdate {
	if s != nil {
		su.SetAttachedFile(*s)
	}
	return su
}

// ClearAttachedFile clears the value of the "attachedFile" field.
func (su *StoryUpdate) ClearAttachedFile() *StoryUpdate {
	su.mutation.ClearAttachedFile()
	return su
}

// SetExternalWebLink sets the "externalWebLink" field.
func (su *StoryUpdate) SetExternalWebLink(s string) *StoryUpdate {
	su.mutation.SetExternalWebLink(s)
	return su
}

// SetNillableExternalWebLink sets the "externalWebLink" field if the given value is not nil.
func (su *StoryUpdate) SetNillableExternalWebLink(s *string) *StoryUpdate {
	if s != nil {
		su.SetExternalWebLink(*s)
	}
	return su
}

// ClearExternalWebLink clears the value of the "externalWebLink" field.
func (su *StoryUpdate) ClearExternalWebLink() *StoryUpdate {
	su.mutation.ClearExternalWebLink()
	return su
}

// SetCreatedAt sets the "createdAt" field.
func (su *StoryUpdate) SetCreatedAt(t time.Time) *StoryUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (su *StoryUpdate) SetNillableCreatedAt(t *time.Time) *StoryUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// SetUpdatedAt sets the "updatedAt" field.
func (su *StoryUpdate) SetUpdatedAt(t time.Time) *StoryUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetDeletedAt sets the "deletedAt" field.
func (su *StoryUpdate) SetDeletedAt(t time.Time) *StoryUpdate {
	su.mutation.SetDeletedAt(t)
	return su
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (su *StoryUpdate) SetNillableDeletedAt(t *time.Time) *StoryUpdate {
	if t != nil {
		su.SetDeletedAt(*t)
	}
	return su
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (su *StoryUpdate) ClearDeletedAt() *StoryUpdate {
	su.mutation.ClearDeletedAt()
	return su
}

// SetFromTime sets the "fromTime" field.
func (su *StoryUpdate) SetFromTime(t time.Time) *StoryUpdate {
	su.mutation.SetFromTime(t)
	return su
}

// SetToTime sets the "toTime" field.
func (su *StoryUpdate) SetToTime(t time.Time) *StoryUpdate {
	su.mutation.SetToTime(t)
	return su
}

// SetScanCount sets the "scanCount" field.
func (su *StoryUpdate) SetScanCount(u uint) *StoryUpdate {
	su.mutation.ResetScanCount()
	su.mutation.SetScanCount(u)
	return su
}

// SetNillableScanCount sets the "scanCount" field if the given value is not nil.
func (su *StoryUpdate) SetNillableScanCount(u *uint) *StoryUpdate {
	if u != nil {
		su.SetScanCount(*u)
	}
	return su
}

// AddScanCount adds u to the "scanCount" field.
func (su *StoryUpdate) AddScanCount(u int) *StoryUpdate {
	su.mutation.AddScanCount(u)
	return su
}

// ClearScanCount clears the value of the "scanCount" field.
func (su *StoryUpdate) ClearScanCount() *StoryUpdate {
	su.mutation.ClearScanCount()
	return su
}

// SetStatus sets the "status" field.
func (su *StoryUpdate) SetStatus(s story.Status) *StoryUpdate {
	su.mutation.SetStatus(s)
	return su
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (su *StoryUpdate) SetNillableStatus(s *story.Status) *StoryUpdate {
	if s != nil {
		su.SetStatus(*s)
	}
	return su
}

// SetPostedbyID sets the "postedby" edge to the User entity by ID.
func (su *StoryUpdate) SetPostedbyID(id int) *StoryUpdate {
	su.mutation.SetPostedbyID(id)
	return su
}

// SetNillablePostedbyID sets the "postedby" edge to the User entity by ID if the given value is not nil.
func (su *StoryUpdate) SetNillablePostedbyID(id *int) *StoryUpdate {
	if id != nil {
		su = su.SetPostedbyID(*id)
	}
	return su
}

// SetPostedby sets the "postedby" edge to the User entity.
func (su *StoryUpdate) SetPostedby(u *User) *StoryUpdate {
	return su.SetPostedbyID(u.ID)
}

// Mutation returns the StoryMutation object of the builder.
func (su *StoryUpdate) Mutation() *StoryMutation {
	return su.mutation
}

// ClearPostedby clears the "postedby" edge to the User entity.
func (su *StoryUpdate) ClearPostedby() *StoryUpdate {
	su.mutation.ClearPostedby()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StoryUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *StoryUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StoryUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StoryUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *StoryUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := story.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *StoryUpdate) check() error {
	if v, ok := su.mutation.StoryName(); ok {
		if err := story.StoryNameValidator(v); err != nil {
			return &ValidationError{Name: "storyName", err: fmt.Errorf(`ent: validator failed for field "Story.storyName": %w`, err)}
		}
	}
	if v, ok := su.mutation.BackgroundColor(); ok {
		if err := story.BackgroundColorValidator(v); err != nil {
			return &ValidationError{Name: "backgroundColor", err: fmt.Errorf(`ent: validator failed for field "Story.backgroundColor": %w`, err)}
		}
	}
	if v, ok := su.mutation.BackgroundImage(); ok {
		if err := story.BackgroundImageValidator(v); err != nil {
			return &ValidationError{Name: "backgroundImage", err: fmt.Errorf(`ent: validator failed for field "Story.backgroundImage": %w`, err)}
		}
	}
	if v, ok := su.mutation.Status(); ok {
		if err := story.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Story.status": %w`, err)}
		}
	}
	return nil
}

func (su *StoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(story.Table, story.Columns, sqlgraph.NewFieldSpec(story.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.StoryName(); ok {
		_spec.SetField(story.FieldStoryName, field.TypeString, value)
	}
	if value, ok := su.mutation.BackgroundColor(); ok {
		_spec.SetField(story.FieldBackgroundColor, field.TypeString, value)
	}
	if value, ok := su.mutation.BackgroundImage(); ok {
		_spec.SetField(story.FieldBackgroundImage, field.TypeString, value)
	}
	if value, ok := su.mutation.IsShareable(); ok {
		_spec.SetField(story.FieldIsShareable, field.TypeBool, value)
	}
	if value, ok := su.mutation.AttachedFile(); ok {
		_spec.SetField(story.FieldAttachedFile, field.TypeString, value)
	}
	if su.mutation.AttachedFileCleared() {
		_spec.ClearField(story.FieldAttachedFile, field.TypeString)
	}
	if value, ok := su.mutation.ExternalWebLink(); ok {
		_spec.SetField(story.FieldExternalWebLink, field.TypeString, value)
	}
	if su.mutation.ExternalWebLinkCleared() {
		_spec.ClearField(story.FieldExternalWebLink, field.TypeString)
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.SetField(story.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(story.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.DeletedAt(); ok {
		_spec.SetField(story.FieldDeletedAt, field.TypeTime, value)
	}
	if su.mutation.DeletedAtCleared() {
		_spec.ClearField(story.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := su.mutation.FromTime(); ok {
		_spec.SetField(story.FieldFromTime, field.TypeTime, value)
	}
	if value, ok := su.mutation.ToTime(); ok {
		_spec.SetField(story.FieldToTime, field.TypeTime, value)
	}
	if value, ok := su.mutation.ScanCount(); ok {
		_spec.SetField(story.FieldScanCount, field.TypeUint, value)
	}
	if value, ok := su.mutation.AddedScanCount(); ok {
		_spec.AddField(story.FieldScanCount, field.TypeUint, value)
	}
	if su.mutation.ScanCountCleared() {
		_spec.ClearField(story.FieldScanCount, field.TypeUint)
	}
	if value, ok := su.mutation.Status(); ok {
		_spec.SetField(story.FieldStatus, field.TypeEnum, value)
	}
	if su.mutation.PostedbyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   story.PostedbyTable,
			Columns: []string{story.PostedbyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.PostedbyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   story.PostedbyTable,
			Columns: []string{story.PostedbyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{story.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// StoryUpdateOne is the builder for updating a single Story entity.
type StoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StoryMutation
}

// SetStoryName sets the "storyName" field.
func (suo *StoryUpdateOne) SetStoryName(s string) *StoryUpdateOne {
	suo.mutation.SetStoryName(s)
	return suo
}

// SetBackgroundColor sets the "backgroundColor" field.
func (suo *StoryUpdateOne) SetBackgroundColor(s string) *StoryUpdateOne {
	suo.mutation.SetBackgroundColor(s)
	return suo
}

// SetBackgroundImage sets the "backgroundImage" field.
func (suo *StoryUpdateOne) SetBackgroundImage(s string) *StoryUpdateOne {
	suo.mutation.SetBackgroundImage(s)
	return suo
}

// SetIsShareable sets the "isShareable" field.
func (suo *StoryUpdateOne) SetIsShareable(b bool) *StoryUpdateOne {
	suo.mutation.SetIsShareable(b)
	return suo
}

// SetNillableIsShareable sets the "isShareable" field if the given value is not nil.
func (suo *StoryUpdateOne) SetNillableIsShareable(b *bool) *StoryUpdateOne {
	if b != nil {
		suo.SetIsShareable(*b)
	}
	return suo
}

// SetAttachedFile sets the "attachedFile" field.
func (suo *StoryUpdateOne) SetAttachedFile(s string) *StoryUpdateOne {
	suo.mutation.SetAttachedFile(s)
	return suo
}

// SetNillableAttachedFile sets the "attachedFile" field if the given value is not nil.
func (suo *StoryUpdateOne) SetNillableAttachedFile(s *string) *StoryUpdateOne {
	if s != nil {
		suo.SetAttachedFile(*s)
	}
	return suo
}

// ClearAttachedFile clears the value of the "attachedFile" field.
func (suo *StoryUpdateOne) ClearAttachedFile() *StoryUpdateOne {
	suo.mutation.ClearAttachedFile()
	return suo
}

// SetExternalWebLink sets the "externalWebLink" field.
func (suo *StoryUpdateOne) SetExternalWebLink(s string) *StoryUpdateOne {
	suo.mutation.SetExternalWebLink(s)
	return suo
}

// SetNillableExternalWebLink sets the "externalWebLink" field if the given value is not nil.
func (suo *StoryUpdateOne) SetNillableExternalWebLink(s *string) *StoryUpdateOne {
	if s != nil {
		suo.SetExternalWebLink(*s)
	}
	return suo
}

// ClearExternalWebLink clears the value of the "externalWebLink" field.
func (suo *StoryUpdateOne) ClearExternalWebLink() *StoryUpdateOne {
	suo.mutation.ClearExternalWebLink()
	return suo
}

// SetCreatedAt sets the "createdAt" field.
func (suo *StoryUpdateOne) SetCreatedAt(t time.Time) *StoryUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (suo *StoryUpdateOne) SetNillableCreatedAt(t *time.Time) *StoryUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// SetUpdatedAt sets the "updatedAt" field.
func (suo *StoryUpdateOne) SetUpdatedAt(t time.Time) *StoryUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetDeletedAt sets the "deletedAt" field.
func (suo *StoryUpdateOne) SetDeletedAt(t time.Time) *StoryUpdateOne {
	suo.mutation.SetDeletedAt(t)
	return suo
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (suo *StoryUpdateOne) SetNillableDeletedAt(t *time.Time) *StoryUpdateOne {
	if t != nil {
		suo.SetDeletedAt(*t)
	}
	return suo
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (suo *StoryUpdateOne) ClearDeletedAt() *StoryUpdateOne {
	suo.mutation.ClearDeletedAt()
	return suo
}

// SetFromTime sets the "fromTime" field.
func (suo *StoryUpdateOne) SetFromTime(t time.Time) *StoryUpdateOne {
	suo.mutation.SetFromTime(t)
	return suo
}

// SetToTime sets the "toTime" field.
func (suo *StoryUpdateOne) SetToTime(t time.Time) *StoryUpdateOne {
	suo.mutation.SetToTime(t)
	return suo
}

// SetScanCount sets the "scanCount" field.
func (suo *StoryUpdateOne) SetScanCount(u uint) *StoryUpdateOne {
	suo.mutation.ResetScanCount()
	suo.mutation.SetScanCount(u)
	return suo
}

// SetNillableScanCount sets the "scanCount" field if the given value is not nil.
func (suo *StoryUpdateOne) SetNillableScanCount(u *uint) *StoryUpdateOne {
	if u != nil {
		suo.SetScanCount(*u)
	}
	return suo
}

// AddScanCount adds u to the "scanCount" field.
func (suo *StoryUpdateOne) AddScanCount(u int) *StoryUpdateOne {
	suo.mutation.AddScanCount(u)
	return suo
}

// ClearScanCount clears the value of the "scanCount" field.
func (suo *StoryUpdateOne) ClearScanCount() *StoryUpdateOne {
	suo.mutation.ClearScanCount()
	return suo
}

// SetStatus sets the "status" field.
func (suo *StoryUpdateOne) SetStatus(s story.Status) *StoryUpdateOne {
	suo.mutation.SetStatus(s)
	return suo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suo *StoryUpdateOne) SetNillableStatus(s *story.Status) *StoryUpdateOne {
	if s != nil {
		suo.SetStatus(*s)
	}
	return suo
}

// SetPostedbyID sets the "postedby" edge to the User entity by ID.
func (suo *StoryUpdateOne) SetPostedbyID(id int) *StoryUpdateOne {
	suo.mutation.SetPostedbyID(id)
	return suo
}

// SetNillablePostedbyID sets the "postedby" edge to the User entity by ID if the given value is not nil.
func (suo *StoryUpdateOne) SetNillablePostedbyID(id *int) *StoryUpdateOne {
	if id != nil {
		suo = suo.SetPostedbyID(*id)
	}
	return suo
}

// SetPostedby sets the "postedby" edge to the User entity.
func (suo *StoryUpdateOne) SetPostedby(u *User) *StoryUpdateOne {
	return suo.SetPostedbyID(u.ID)
}

// Mutation returns the StoryMutation object of the builder.
func (suo *StoryUpdateOne) Mutation() *StoryMutation {
	return suo.mutation
}

// ClearPostedby clears the "postedby" edge to the User entity.
func (suo *StoryUpdateOne) ClearPostedby() *StoryUpdateOne {
	suo.mutation.ClearPostedby()
	return suo
}

// Where appends a list predicates to the StoryUpdate builder.
func (suo *StoryUpdateOne) Where(ps ...predicate.Story) *StoryUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StoryUpdateOne) Select(field string, fields ...string) *StoryUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Story entity.
func (suo *StoryUpdateOne) Save(ctx context.Context) (*Story, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StoryUpdateOne) SaveX(ctx context.Context) *Story {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StoryUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StoryUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *StoryUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := story.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *StoryUpdateOne) check() error {
	if v, ok := suo.mutation.StoryName(); ok {
		if err := story.StoryNameValidator(v); err != nil {
			return &ValidationError{Name: "storyName", err: fmt.Errorf(`ent: validator failed for field "Story.storyName": %w`, err)}
		}
	}
	if v, ok := suo.mutation.BackgroundColor(); ok {
		if err := story.BackgroundColorValidator(v); err != nil {
			return &ValidationError{Name: "backgroundColor", err: fmt.Errorf(`ent: validator failed for field "Story.backgroundColor": %w`, err)}
		}
	}
	if v, ok := suo.mutation.BackgroundImage(); ok {
		if err := story.BackgroundImageValidator(v); err != nil {
			return &ValidationError{Name: "backgroundImage", err: fmt.Errorf(`ent: validator failed for field "Story.backgroundImage": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Status(); ok {
		if err := story.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Story.status": %w`, err)}
		}
	}
	return nil
}

func (suo *StoryUpdateOne) sqlSave(ctx context.Context) (_node *Story, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(story.Table, story.Columns, sqlgraph.NewFieldSpec(story.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Story.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, story.FieldID)
		for _, f := range fields {
			if !story.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != story.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.StoryName(); ok {
		_spec.SetField(story.FieldStoryName, field.TypeString, value)
	}
	if value, ok := suo.mutation.BackgroundColor(); ok {
		_spec.SetField(story.FieldBackgroundColor, field.TypeString, value)
	}
	if value, ok := suo.mutation.BackgroundImage(); ok {
		_spec.SetField(story.FieldBackgroundImage, field.TypeString, value)
	}
	if value, ok := suo.mutation.IsShareable(); ok {
		_spec.SetField(story.FieldIsShareable, field.TypeBool, value)
	}
	if value, ok := suo.mutation.AttachedFile(); ok {
		_spec.SetField(story.FieldAttachedFile, field.TypeString, value)
	}
	if suo.mutation.AttachedFileCleared() {
		_spec.ClearField(story.FieldAttachedFile, field.TypeString)
	}
	if value, ok := suo.mutation.ExternalWebLink(); ok {
		_spec.SetField(story.FieldExternalWebLink, field.TypeString, value)
	}
	if suo.mutation.ExternalWebLinkCleared() {
		_spec.ClearField(story.FieldExternalWebLink, field.TypeString)
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.SetField(story.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(story.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.DeletedAt(); ok {
		_spec.SetField(story.FieldDeletedAt, field.TypeTime, value)
	}
	if suo.mutation.DeletedAtCleared() {
		_spec.ClearField(story.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := suo.mutation.FromTime(); ok {
		_spec.SetField(story.FieldFromTime, field.TypeTime, value)
	}
	if value, ok := suo.mutation.ToTime(); ok {
		_spec.SetField(story.FieldToTime, field.TypeTime, value)
	}
	if value, ok := suo.mutation.ScanCount(); ok {
		_spec.SetField(story.FieldScanCount, field.TypeUint, value)
	}
	if value, ok := suo.mutation.AddedScanCount(); ok {
		_spec.AddField(story.FieldScanCount, field.TypeUint, value)
	}
	if suo.mutation.ScanCountCleared() {
		_spec.ClearField(story.FieldScanCount, field.TypeUint)
	}
	if value, ok := suo.mutation.Status(); ok {
		_spec.SetField(story.FieldStatus, field.TypeEnum, value)
	}
	if suo.mutation.PostedbyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   story.PostedbyTable,
			Columns: []string{story.PostedbyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.PostedbyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   story.PostedbyTable,
			Columns: []string{story.PostedbyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Story{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{story.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
