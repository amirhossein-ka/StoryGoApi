// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// GuestUsersColumns holds the columns for the "guest_users" table.
	GuestUsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "token", Type: field.TypeString, Unique: true},
		{Name: "version_number", Type: field.TypeInt},
		{Name: "operation_system", Type: field.TypeString},
		{Name: "user_agent", Type: field.TypeString},
		{Name: "display_details", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
	}
	// GuestUsersTable holds the schema information for the "guest_users" table.
	GuestUsersTable = &schema.Table{
		Name:       "guest_users",
		Columns:    GuestUsersColumns,
		PrimaryKey: []*schema.Column{GuestUsersColumns[0]},
	}
	// StoriesColumns holds the columns for the "stories" table.
	StoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "story_name", Type: field.TypeString},
		{Name: "background_color", Type: field.TypeString},
		{Name: "background_image", Type: field.TypeString},
		{Name: "is_shareable", Type: field.TypeBool, Default: true},
		{Name: "attached_file", Type: field.TypeString, Nullable: true},
		{Name: "external_web_link", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "from_time", Type: field.TypeTime},
		{Name: "to_time", Type: field.TypeTime},
		{Name: "scan_count", Type: field.TypeUint, Nullable: true, Default: 1},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"private", "public"}, Default: "private"},
		{Name: "user_posted", Type: field.TypeInt, Nullable: true},
	}
	// StoriesTable holds the schema information for the "stories" table.
	StoriesTable = &schema.Table{
		Name:       "stories",
		Columns:    StoriesColumns,
		PrimaryKey: []*schema.Column{StoriesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "stories_users_posted",
				Columns:    []*schema.Column{StoriesColumns[14]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// GuestUserFollowedColumns holds the columns for the "guest_user_followed" table.
	GuestUserFollowedColumns = []*schema.Column{
		{Name: "guest_user_id", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeInt},
	}
	// GuestUserFollowedTable holds the schema information for the "guest_user_followed" table.
	GuestUserFollowedTable = &schema.Table{
		Name:       "guest_user_followed",
		Columns:    GuestUserFollowedColumns,
		PrimaryKey: []*schema.Column{GuestUserFollowedColumns[0], GuestUserFollowedColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "guest_user_followed_guest_user_id",
				Columns:    []*schema.Column{GuestUserFollowedColumns[0]},
				RefColumns: []*schema.Column{GuestUsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "guest_user_followed_user_id",
				Columns:    []*schema.Column{GuestUserFollowedColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		GuestUsersTable,
		StoriesTable,
		UsersTable,
		GuestUserFollowedTable,
	}
)

func init() {
	StoriesTable.ForeignKeys[0].RefTable = UsersTable
	GuestUserFollowedTable.ForeignKeys[0].RefTable = GuestUsersTable
	GuestUserFollowedTable.ForeignKeys[1].RefTable = UsersTable
}
