// Code generated by ent, DO NOT EDIT.

package ent

import (
	"StoryGoAPI/ent/guestuser"
	"StoryGoAPI/ent/schema"
	"StoryGoAPI/ent/story"
	"StoryGoAPI/ent/user"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	guestuserFields := schema.GuestUser{}.Fields()
	_ = guestuserFields
	// guestuserDescToken is the schema descriptor for token field.
	guestuserDescToken := guestuserFields[0].Descriptor()
	// guestuser.TokenValidator is a validator for the "token" field. It is called by the builders before save.
	guestuser.TokenValidator = guestuserDescToken.Validators[0].(func(string) error)
	// guestuserDescCreatedAt is the schema descriptor for created_at field.
	guestuserDescCreatedAt := guestuserFields[5].Descriptor()
	// guestuser.DefaultCreatedAt holds the default value on creation for the created_at field.
	guestuser.DefaultCreatedAt = guestuserDescCreatedAt.Default.(time.Time)
	storyFields := schema.Story{}.Fields()
	_ = storyFields
	// storyDescStoryName is the schema descriptor for storyName field.
	storyDescStoryName := storyFields[0].Descriptor()
	// story.StoryNameValidator is a validator for the "storyName" field. It is called by the builders before save.
	story.StoryNameValidator = storyDescStoryName.Validators[0].(func(string) error)
	// storyDescBackgroundColor is the schema descriptor for backgroundColor field.
	storyDescBackgroundColor := storyFields[1].Descriptor()
	// story.BackgroundColorValidator is a validator for the "backgroundColor" field. It is called by the builders before save.
	story.BackgroundColorValidator = func() func(string) error {
		validators := storyDescBackgroundColor.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(backgroundColor string) error {
			for _, fn := range fns {
				if err := fn(backgroundColor); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// storyDescBackgroundImage is the schema descriptor for backgroundImage field.
	storyDescBackgroundImage := storyFields[2].Descriptor()
	// story.BackgroundImageValidator is a validator for the "backgroundImage" field. It is called by the builders before save.
	story.BackgroundImageValidator = storyDescBackgroundImage.Validators[0].(func(string) error)
	// storyDescIsShareable is the schema descriptor for isShareable field.
	storyDescIsShareable := storyFields[3].Descriptor()
	// story.DefaultIsShareable holds the default value on creation for the isShareable field.
	story.DefaultIsShareable = storyDescIsShareable.Default.(bool)
	// storyDescCreatedAt is the schema descriptor for createdAt field.
	storyDescCreatedAt := storyFields[6].Descriptor()
	// story.DefaultCreatedAt holds the default value on creation for the createdAt field.
	story.DefaultCreatedAt = storyDescCreatedAt.Default.(func() time.Time)
	// storyDescUpdatedAt is the schema descriptor for updatedAt field.
	storyDescUpdatedAt := storyFields[7].Descriptor()
	// story.DefaultUpdatedAt holds the default value on creation for the updatedAt field.
	story.DefaultUpdatedAt = storyDescUpdatedAt.Default.(func() time.Time)
	// story.UpdateDefaultUpdatedAt holds the default value on update for the updatedAt field.
	story.UpdateDefaultUpdatedAt = storyDescUpdatedAt.UpdateDefault.(func() time.Time)
	// storyDescScanCount is the schema descriptor for scanCount field.
	storyDescScanCount := storyFields[11].Descriptor()
	// story.DefaultScanCount holds the default value on creation for the scanCount field.
	story.DefaultScanCount = storyDescScanCount.Default.(uint)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[0].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = userDescName.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[1].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
}
