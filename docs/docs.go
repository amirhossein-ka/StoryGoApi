// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "GPL 3",
            "url": "https://www.gnu.org/licenses/gpl-3.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/user/edit_story/{story_id}": {
            "put": {
                "security": [
                    {
                        "JwtAuth": []
                    }
                ],
                "description": "Edit an existing story with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "story",
                    "user"
                ],
                "summary": "Edit a story",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Story ID to be edited",
                        "name": "story_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Story details to be edited",
                        "name": "story",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DTO.StoryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DTO.StoryResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/DTO.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/DTO.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/DTO.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/guest/delete": {
            "delete": {
                "security": [
                    {
                        "GuestAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "guest"
                ],
                "summary": "Delete a guest token",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DTO.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/DTO.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/guest/new": {
            "post": {
                "description": "Generate a guest token for anonymous access.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "guest"
                ],
                "summary": "Generate a guest token",
                "parameters": [
                    {
                        "description": "Guest details",
                        "name": "guest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DTO.NewGuestReq"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/DTO.GuestResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/DTO.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/guest/scan/{id}": {
            "post": {
                "security": [
                    {
                        "GuestAuth": []
                    }
                ],
                "description": "Scan a story using a guest token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "story",
                    "guest"
                ],
                "summary": "Scan a story",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Story ID to be scanned",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Guest token for authentication",
                        "name": "token",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DTO.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/DTO.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/guest/stories": {
            "get": {
                "security": [
                    {
                        "GuestAuth": []
                    }
                ],
                "description": "Retrieve a story feed based on specified options.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "story",
                    "guest"
                ],
                "summary": "Get story feed",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Sort the stories by a field (e.g., 'created')",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit the number of returned stories",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset the returned stories",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter stories by start date (e.g.: 2006-01-02T15:04:05)",
                        "name": "from_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter stories by end date (e.g: 2006-01-02T15:04:05)",
                        "name": "to_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Guest token for authentication",
                        "name": "token",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DTO.StoriesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/DTO.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/guest/verify": {
            "post": {
                "description": "Check the validity of a guest token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "guest"
                ],
                "summary": "Check a guest token",
                "parameters": [
                    {
                        "description": "Guest token to be checked",
                        "name": "token",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DTO.VerifyReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DTO.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/DTO.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/DTO.SuccessResponse"
                        }
                    }
                }
            }
        },
        "/user/delete": {
            "delete": {
                "security": [
                    {
                        "JwtAuth": []
                    }
                ],
                "description": "Delete the user account associated with the provided JWT token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Delete user account",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DTO.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/DTO.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/DTO.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/DTO.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/delete_story/{id}": {
            "delete": {
                "security": [
                    {
                        "JwtAuth": []
                    }
                ],
                "description": "Delete a story with the provided ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "story",
                    "user"
                ],
                "summary": "Delete a story",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Story ID to be deleted",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DTO.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/DTO.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/DTO.ErrorResponse"
                        }
                    }
                },
                "x-order": 8
            }
        },
        "/user/login": {
            "post": {
                "description": "Authenticate a user with their credentials and retrieve an access token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "User login credentials",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DTO.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/DTO.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/DTO.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/DTO.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/new_story": {
            "post": {
                "security": [
                    {
                        "JwtAuth": []
                    }
                ],
                "description": "Create a new story with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user",
                    "story"
                ],
                "summary": "Create a new story",
                "parameters": [
                    {
                        "description": "New story details",
                        "name": "story",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DTO.CreateStoryRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/DTO.StoryResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/DTO.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/DTO.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/register": {
            "post": {
                "description": "Register a new user with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DTO.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DTO.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/DTO.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/DTO.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/stories": {
            "get": {
                "security": [
                    {
                        "JwtAuth": []
                    }
                ],
                "description": "Retrieve all posted stories of the user based on specified options.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "story",
                    "user"
                ],
                "summary": "Get all posted stories of the user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Sort the stories by a field (e.g., 'created')",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit the number of returned stories",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset the returned stories",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter stories by start date (2006-01-02T15:04:05Z07:00)",
                        "name": "from_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter stories by end date (2006-01-02T15:04:05Z07:00)",
                        "name": "to_date",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DTO.StoriesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/DTO.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/DTO.ErrorResponse"
                        }
                    }
                },
                "x-order": 5
            }
        }
    },
    "definitions": {
        "DTO.CreateStoryRequest": {
            "type": "object",
            "properties": {
                "attachedFile": {
                    "type": "string",
                    "example": "http://example.com/myfile.pdf"
                },
                "backgroundColor": {
                    "type": "string",
                    "example": "#RRGGBB"
                },
                "backgroundImage": {
                    "type": "string",
                    "example": "http://example.com/myimage.jpg"
                },
                "externalWebLink": {
                    "type": "string",
                    "example": "http://example.com"
                },
                "fromTime": {
                    "type": "string",
                    "example": "2020-01-01T00:00:00Z"
                },
                "isShareable": {
                    "type": "boolean",
                    "example": true
                },
                "status": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/DTO.Status"
                        }
                    ],
                    "example": "private/public"
                },
                "storyName": {
                    "type": "string",
                    "example": "My first story"
                },
                "toTime": {
                    "type": "string",
                    "example": "2020-12-31T23:59:59Z"
                }
            }
        },
        "DTO.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "DTO.GuestResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
                },
                "userAgent": {
                    "type": "string",
                    "example": "Mozilla/5.0"
                }
            }
        },
        "DTO.LoginResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
                }
            }
        },
        "DTO.NewGuestReq": {
            "type": "object",
            "properties": {
                "displayDetails": {
                    "type": "string",
                    "example": "1920x1080"
                },
                "operatingSystem": {
                    "type": "string",
                    "example": "Linux"
                },
                "versionNumber": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "DTO.RegisterRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "password": {
                    "type": "string",
                    "example": "password123"
                }
            }
        },
        "DTO.Status": {
            "type": "string",
            "enum": [
                "private",
                "public"
            ],
            "x-enum-varnames": [
                "StatusPrivate",
                "StatusPublic"
            ]
        },
        "DTO.StoriesResponse": {
            "type": "object",
            "properties": {
                "stories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DTO.StoryResponse"
                    }
                }
            }
        },
        "DTO.StoryRequest": {
            "type": "object",
            "properties": {
                "attachedFile": {
                    "type": "string"
                },
                "backgroundColor": {
                    "type": "string"
                },
                "backgroundImage": {
                    "type": "string"
                },
                "creatorUserId": {
                    "type": "integer"
                },
                "externalWebLink": {
                    "type": "string"
                },
                "fromTime": {
                    "type": "string"
                },
                "isShareable": {
                    "type": "boolean"
                },
                "status": {
                    "$ref": "#/definitions/DTO.Status"
                },
                "storyID": {
                    "type": "integer"
                },
                "storyName": {
                    "type": "string"
                },
                "toTime": {
                    "type": "string"
                }
            }
        },
        "DTO.StoryResponse": {
            "type": "object",
            "properties": {
                "attachedFile": {
                    "type": "string"
                },
                "backgroundColor": {
                    "type": "string"
                },
                "backgroundImage": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "creatorUserId": {
                    "type": "integer"
                },
                "externalWebLink": {
                    "type": "string"
                },
                "fromTime": {
                    "type": "string"
                },
                "isShareable": {
                    "type": "boolean"
                },
                "relevance": {
                    "type": "boolean"
                },
                "status": {
                    "$ref": "#/definitions/DTO.Status"
                },
                "storyID": {
                    "type": "integer"
                },
                "storyName": {
                    "type": "string"
                },
                "toTime": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "DTO.SuccessResponse": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "boolean"
                }
            }
        },
        "DTO.VerifyReq": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
                }
            }
        }
    },
    "securityDefinitions": {
        "GuestAuth": {
            "description": "Just put the guest api key in header.",
            "type": "apiKey",
            "name": "X-Guest-Token",
            "in": "header"
        },
        "JwtAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
